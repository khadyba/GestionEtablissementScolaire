{
    "sourceFile": "app/Http/Controllers/AdministrateurController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1728140094485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728979577128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,13 +37,13 @@\n         $classeId = $classeId ? $classeId->id : null;\n         return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n     }\n \n-    public function listeElevesInscrits()\n-    {\n-        $elevesInscrits = Payment::where('statut', 1)->with('eleve')->get();\n-        return view('Administrateur.admindashboard', compact('elevesInscrits'));\n-    }\n+    // public function listeElevesInscrits()\n+    // {\n+    //     $elevesInscrits = Payment::where('statut', 1)->with('eleve')->get();\n+    //     return view('Administrateur.admindashboard', compact('elevesInscrits'));\n+    // }\n     // $emploisDuTemps = EmploisDuTemps::all();\n     /**\n      * Show the form for creating a new resource.\n      *\n"
                },
                {
                    "date": 1728979594796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,33 @@\n     // {\n     //     $elevesInscrits = Payment::where('statut', 1)->with('eleve')->get();\n     //     return view('Administrateur.admindashboard', compact('elevesInscrits'));\n     // }\n+    public function listeElevesInscrits()\n+{\n+    // Récupère les élèves inscrits dans les établissements privés (toutes les inscriptions)\n+    $elevesPrives = Payment::where('statut', 1)\n+                            ->whereHas('eleve.etablissement', function($query) {\n+                                $query->where('type', 'privé'); // Assurez que le type est correct\n+                            })\n+                            ->with('eleve')\n+                            ->get();\n+\n+    // Récupère un seul élève par établissement public (par exemple le plus récent)\n+    $elevesPublics = Payment::where('statut', 1)\n+                            ->whereHas('eleve.etablissement', function($query) {\n+                                $query->where('type', 'public');\n+                            })\n+                            ->with('eleve')\n+                            ->groupBy('eleve_id') // Éviter les doublons d'élèves dans les établissements publics\n+                            ->get();\n+\n+    // Fusionner les deux collections\n+    $elevesInscrits = $elevesPrives->merge($elevesPublics);\n+\n+    return view('Administrateur.admindashboard', compact('elevesInscrits'));\n+}\n+\n     // $emploisDuTemps = EmploisDuTemps::all();\n     /**\n      * Show the form for creating a new resource.\n      *\n"
                },
                {
                    "date": 1728980480760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     public function listeElevesInscrits()\n {\n     // Récupère les élèves inscrits dans les établissements privés (toutes les inscriptions)\n     $elevesPrives = Payment::where('statut', 1)\n-                            ->whereHas('eleve.etablissement', function($query) {\n+                            ->whereHas('eleves.etablissement', function($query) {\n                                 $query->where('type', 'privé'); // Assurez que le type est correct\n                             })\n                             ->with('eleve')\n                             ->get();\n"
                },
                {
                    "date": 1728980487413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,14 +49,14 @@\n     $elevesPrives = Payment::where('statut', 1)\n                             ->whereHas('eleves.etablissement', function($query) {\n                                 $query->where('type', 'privé'); // Assurez que le type est correct\n                             })\n-                            ->with('eleve')\n+                            ->with('eleves')\n                             ->get();\n \n     // Récupère un seul élève par établissement public (par exemple le plus récent)\n     $elevesPublics = Payment::where('statut', 1)\n-                            ->whereHas('eleve.etablissement', function($query) {\n+                            ->whereHas('eleves.etablissement', function($query) {\n                                 $query->where('type', 'public');\n                             })\n                             ->with('eleve')\n                             ->groupBy('eleve_id') // Éviter les doublons d'élèves dans les établissements publics\n"
                },
                {
                    "date": 1728980621712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,17 +49,17 @@\n     $elevesPrives = Payment::where('statut', 1)\n                             ->whereHas('eleves.etablissement', function($query) {\n                                 $query->where('type', 'privé'); // Assurez que le type est correct\n                             })\n-                            ->with('eleves')\n+                            ->with('eleve')\n                             ->get();\n \n     // Récupère un seul élève par établissement public (par exemple le plus récent)\n     $elevesPublics = Payment::where('statut', 1)\n                             ->whereHas('eleves.etablissement', function($query) {\n                                 $query->where('type', 'public');\n                             })\n-                            ->with('eleve')\n+                            ->with('eleves')\n                             ->groupBy('eleve_id') // Éviter les doublons d'élèves dans les établissements publics\n                             ->get();\n \n     // Fusionner les deux collections\n"
                },
                {
                    "date": 1728980629598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     public function listeElevesInscrits()\n {\n     // Récupère les élèves inscrits dans les établissements privés (toutes les inscriptions)\n     $elevesPrives = Payment::where('statut', 1)\n-                            ->whereHas('eleves.etablissement', function($query) {\n+                            ->whereHas('eleve.etablissement', function($query) {\n                                 $query->where('type', 'privé'); // Assurez que le type est correct\n                             })\n                             ->with('eleve')\n                             ->get();\n@@ -57,9 +57,9 @@\n     $elevesPublics = Payment::where('statut', 1)\n                             ->whereHas('eleves.etablissement', function($query) {\n                                 $query->where('type', 'public');\n                             })\n-                            ->with('eleves')\n+                            ->with('eleve')\n                             ->groupBy('eleve_id') // Éviter les doublons d'élèves dans les établissements publics\n                             ->get();\n \n     // Fusionner les deux collections\n"
                },
                {
                    "date": 1728982190305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,32 +43,18 @@\n     //     $elevesInscrits = Payment::where('statut', 1)->with('eleve')->get();\n     //     return view('Administrateur.admindashboard', compact('elevesInscrits'));\n     // }\n     public function listeElevesInscrits()\n-{\n-    // Récupère les élèves inscrits dans les établissements privés (toutes les inscriptions)\n-    $elevesPrives = Payment::where('statut', 1)\n-                            ->whereHas('eleve.etablissement', function($query) {\n-                                $query->where('type', 'privé'); // Assurez que le type est correct\n-                            })\n-                            ->with('eleve')\n-                            ->get();\n+    {\n+        // Charge les paiements, les élèves (via la relation avec User) et l'établissement de l'utilisateur\n+        $elevesInscrits = Payment::where('statut', 1)\n+            ->with(['eleve.user.etablissement']) // Charge l'étudiant, l'utilisateur et l'établissement\n+            ->get();\n+        \n+        return view('Administrateur.admindashboard', compact('elevesInscrits'));\n+    }\n+    \n \n-    // Récupère un seul élève par établissement public (par exemple le plus récent)\n-    $elevesPublics = Payment::where('statut', 1)\n-                            ->whereHas('eleves.etablissement', function($query) {\n-                                $query->where('type', 'public');\n-                            })\n-                            ->with('eleve')\n-                            ->groupBy('eleve_id') // Éviter les doublons d'élèves dans les établissements publics\n-                            ->get();\n-\n-    // Fusionner les deux collections\n-    $elevesInscrits = $elevesPrives->merge($elevesPublics);\n-\n-    return view('Administrateur.admindashboard', compact('elevesInscrits'));\n-}\n-\n     // $emploisDuTemps = EmploisDuTemps::all();\n     /**\n      * Show the form for creating a new resource.\n      *\n"
                },
                {
                    "date": 1728982710849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,14 +46,15 @@\n     public function listeElevesInscrits()\n     {\n         // Charge les paiements, les élèves (via la relation avec User) et l'établissement de l'utilisateur\n         $elevesInscrits = Payment::where('statut', 1)\n-            ->with(['eleve.user.etablissement']) // Charge l'étudiant, l'utilisateur et l'établissement\n+            ->with(['eleve.user.etablissement']) // Charge l'élève, l'utilisateur et l'établissement\n             ->get();\n         \n         return view('Administrateur.admindashboard', compact('elevesInscrits'));\n     }\n     \n+    \n \n     // $emploisDuTemps = EmploisDuTemps::all();\n     /**\n      * Show the form for creating a new resource.\n"
                },
                {
                    "date": 1728982976753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n         return view('Administrateur.admindashboard', compact('elevesInscrits'));\n     }\n     \n     \n+    \n \n     // $emploisDuTemps = EmploisDuTemps::all();\n     /**\n      * Show the form for creating a new resource.\n"
                },
                {
                    "date": 1728983105510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     public function listeElevesInscrits()\n     {\n         // Charge les paiements, les élèves (via la relation avec User) et l'établissement de l'utilisateur\n         $elevesInscrits = Payment::where('statut', 1)\n-            ->with(['eleve.user.etablissement']) // Charge l'élève, l'utilisateur et l'établissement\n+            ->with(['eleve.user.etablissement']) \n             ->get();\n         \n         return view('Administrateur.admindashboard', compact('elevesInscrits'));\n     }\n"
                },
                {
                    "date": 1728984836616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,18 +44,19 @@\n     //     return view('Administrateur.admindashboard', compact('elevesInscrits'));\n     // }\n     public function listeElevesInscrits()\n     {\n-        // Charge les paiements, les élèves (via la relation avec User) et l'établissement de l'utilisateur\n+        // Charge les paiements et les élèves (via la relation avec User et Etablissement)\n         $elevesInscrits = Payment::where('statut', 1)\n-            ->with(['eleve.user.etablissement']) \n+            ->with(['eleve.user.etablissement']) // Charge l'élève, l'utilisateur et l'établissement\n             ->get();\n         \n         return view('Administrateur.admindashboard', compact('elevesInscrits'));\n     }\n     \n     \n     \n+    \n \n     // $emploisDuTemps = EmploisDuTemps::all();\n     /**\n      * Show the form for creating a new resource.\n"
                },
                {
                    "date": 1728985733431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,13 +37,9 @@\n         $classeId = $classeId ? $classeId->id : null;\n         return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n     }\n \n-    // public function listeElevesInscrits()\n-    // {\n-    //     $elevesInscrits = Payment::where('statut', 1)->with('eleve')->get();\n-    //     return view('Administrateur.admindashboard', compact('elevesInscrits'));\n-    // }\n+ \n     public function listeElevesInscrits()\n     {\n         // Charge les paiements et les élèves (via la relation avec User et Etablissement)\n         $elevesInscrits = Payment::where('statut', 1)\n"
                },
                {
                    "date": 1731405045962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n {\n     $professeur = auth()->user()->professeur;\n     $classe = Classe::findOrFail($id);\n     $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n-    return view('Administrateur.Classe.courList', compact('classe', 'cours'));\n+    return view('Administrateur.Classe.CourList', compact('classe', 'cours'));\n }\n \n public function destroyProfessor($id)\n {\n"
                },
                {
                    "date": 1733146952446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       {\n         $etablissements = Etablissement::all(); \n         return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n       }\n-\n+// avant de créer un \n     public function ajouterProfesseur(AjoutProfRequest $request)\n     {\n         $validatedData = $request->validated();\n \n"
                },
                {
                    "date": 1733146958981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       {\n         $etablissements = Etablissement::all(); \n         return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n       }\n-// avant de créer un \n+// avant de créer un prof on doit f&\n     public function ajouterProfesseur(AjoutProfRequest $request)\n     {\n         $validatedData = $request->validated();\n \n"
                },
                {
                    "date": 1733146982297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       {\n         $etablissements = Etablissement::all(); \n         return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n       }\n-// avant de créer un prof on doit f&\n+// avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choi\n     public function ajouterProfesseur(AjoutProfRequest $request)\n     {\n         $validatedData = $request->validated();\n \n"
                },
                {
                    "date": 1733147018850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       {\n         $etablissements = Etablissement::all(); \n         return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n       }\n-// avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choi\n+// avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choisi pour la créations si il la pas créer on luis envoi un message d'erreur pour lui dire l\n     public function ajouterProfesseur(AjoutProfRequest $request)\n     {\n         $validatedData = $request->validated();\n \n"
                },
                {
                    "date": 1733147032398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       {\n         $etablissements = Etablissement::all(); \n         return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n       }\n-// avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choisi pour la créations si il la pas créer on luis envoi un message d'erreur pour lui dire l\n+// avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choisi pour la créations si il la pas créer on luis envoi un message d'erreur pour lui dire vous léetablissem\n     public function ajouterProfesseur(AjoutProfRequest $request)\n     {\n         $validatedData = $request->validated();\n \n"
                },
                {
                    "date": 1733147038745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n       {\n         $etablissements = Etablissement::all(); \n         return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n       }\n-// avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choisi pour la créations si il la pas créer on luis envoi un message d'erreur pour lui dire vous léetablissem\n+// avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choisi pour la créations si il la pas créer on luis envoi un message d'erreur pour lui dire vous léetablissement ne vo\n     public function ajouterProfesseur(AjoutProfRequest $request)\n     {\n         $validatedData = $request->validated();\n \n"
                },
                {
                    "date": 1733147049847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,8 +156,9 @@\n         $etablissements = Etablissement::all(); \n         return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n       }\n // avant de créer un prof on doit v&rifier si l'admin a creer l'etablissemnent qu'il a choisi pour la créations si il la pas créer on luis envoi un message d'erreur pour lui dire vous léetablissement ne vo\n+// ne vous appartien pas \n     public function ajouterProfesseur(AjoutProfRequest $request)\n     {\n         $validatedData = $request->validated();\n \n"
                },
                {
                    "date": 1733153068787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,19 +25,19 @@\n      * Display a listing of the resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-    public function index()\n-    {\n-        $elevesInscrits = Payment::where('statut', 1)\n-        ->with('eleve')\n-        ->get()\n-        ->unique('eleve_id');\n-        $emploisDuTemps = EmploisDuTemps::all();\n-        $classeId = Classe::first();\n-        $classeId = $classeId ? $classeId->id : null;\n-        return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n-    }\n+    // public function index()\n+    // {\n+    //     $elevesInscrits = Payment::where('statut', 1)\n+    //     ->with('eleve')\n+    //     ->get()\n+    //     ->unique('eleve_id');\n+    //     $emploisDuTemps = EmploisDuTemps::all();\n+    //     $classeId = Classe::first();\n+    //     $classeId = $classeId ? $classeId->id : null;\n+    //     return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n+    // }\n \n  \n     public function listeElevesInscrits()\n     {\n"
                },
                {
                    "date": 1733153074226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,31 @@\n     //     $classeId = $classeId ? $classeId->id : null;\n     //     return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n     // }\n \n+\n+    public function index()\n+{\n+    // Récupérer l'ID de l'administrateur connecté\n+    $adminId = Auth::guard('admin')->user()->id;\n+\n+    // Filtrer les paiements par administrateur si nécessaire (exemple : si vous avez une relation admin-id dans Payment)\n+    $elevesInscrits = Payment::where('statut', 1)\n+        ->with('eleve')\n+        ->whereHas('eleve', function($query) use ($adminId) {\n+            // Exemple de filtre, vous devez l'adapter selon votre modèle de données\n+            $query->where('admin_id', $adminId); \n+        })\n+        ->get()\n+        ->unique('eleve_id');\n+    \n+    $emploisDuTemps = EmploisDuTemps::all();\n+    $classeId = Classe::first();\n+    $classeId = $classeId ? $classeId->id : null;\n+    \n+    return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n+}\n+\n  \n     public function listeElevesInscrits()\n     {\n         // Charge les paiements et les élèves (via la relation avec User et Etablissement)\n"
                },
                {
                    "date": 1733153420136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,28 +39,31 @@\n     // }\n \n \n     public function index()\n-{\n-    // Récupérer l'ID de l'administrateur connecté\n-    $adminId = Auth::guard('admin')->user()->id;\n-\n-    // Filtrer les paiements par administrateur si nécessaire (exemple : si vous avez une relation admin-id dans Payment)\n-    $elevesInscrits = Payment::where('statut', 1)\n-        ->with('eleve')\n-        ->whereHas('eleve', function($query) use ($adminId) {\n-            // Exemple de filtre, vous devez l'adapter selon votre modèle de données\n-            $query->where('admin_id', $adminId); \n-        })\n-        ->get()\n-        ->unique('eleve_id');\n+    {\n+        // Récupérer l'établissement de l'administrateur connecté\n+        $admin = Auth::guard('admin')->user();\n+        $etablissementId = $admin->etablissement_id;\n     \n-    $emploisDuTemps = EmploisDuTemps::all();\n-    $classeId = Classe::first();\n-    $classeId = $classeId ? $classeId->id : null;\n+        // Filtrer les paiements (élèves inscrits) par l'établissement de l'administrateur\n+        $elevesInscrits = Payment::where('statut', 1)\n+            ->with('eleve') // Assurez-vous d'avoir une relation avec 'eleve'\n+            ->whereHas('eleve', function($query) use ($etablissementId) {\n+                // Filtrer les élèves par l'établissement de l'administrateur\n+                $query->where('etablissement_id', $etablissementId); \n+            })\n+            ->get()\n+            ->unique('eleve_id');\n+        \n+        // Charger d'autres données nécessaires\n+        $emploisDuTemps = EmploisDuTemps::all();\n+        $classeId = Classe::first();\n+        $classeId = $classeId ? $classeId->id : null;\n     \n-    return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n-}\n+        return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n+    }\n+    \n \n  \n     public function listeElevesInscrits()\n     {\n"
                },
                {
                    "date": 1733153446198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n     public function index()\n     {\n         // Récupérer l'établissement de l'administrateur connecté\n         $admin = Auth::guard('admin')->user();\n+        \n         $etablissementId = $admin->etablissement_id;\n     \n         // Filtrer les paiements (élèves inscrits) par l'établissement de l'administrateur\n         $elevesInscrits = Payment::where('statut', 1)\n"
                },
                {
                    "date": 1733153451558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n     public function index()\n     {\n         // Récupérer l'établissement de l'administrateur connecté\n         $admin = Auth::guard('admin')->user();\n-        \n         $etablissementId = $admin->etablissement_id;\n+        dd()\n     \n         // Filtrer les paiements (élèves inscrits) par l'établissement de l'administrateur\n         $elevesInscrits = Payment::where('statut', 1)\n             ->with('eleve') // Assurez-vous d'avoir une relation avec 'eleve'\n"
                },
                {
                    "date": 1733153457830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     {\n         // Récupérer l'établissement de l'administrateur connecté\n         $admin = Auth::guard('admin')->user();\n         $etablissementId = $admin->etablissement_id;\n-        dd()\n+        dd( $etablissementId)\n     \n         // Filtrer les paiements (élèves inscrits) par l'établissement de l'administrateur\n         $elevesInscrits = Payment::where('statut', 1)\n             ->with('eleve') // Assurez-vous d'avoir une relation avec 'eleve'\n"
                },
                {
                    "date": 1733154062918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,31 +40,34 @@\n \n \n     public function index()\n     {\n-        // Récupérer l'établissement de l'administrateur connecté\n-        $admin = Auth::guard('admin')->user();\n-        $etablissementId = $admin->etablissement_id;\n-        dd( $etablissementId)\n+        $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n+        $etablissementId = $admin ? $admin->etablissement_id : null;\n     \n-        // Filtrer les paiements (élèves inscrits) par l'établissement de l'administrateur\n+        // Vérifier si l'administrateur a un établissement associé\n+        if (!$etablissementId) {\n+            // Si l'administrateur n'a pas d'établissement associé, afficher un message\n+            return redirect()->route('admin.dashboard')->withErrors('Aucun établissement associé à cet administrateur.');\n+        }\n+    \n+        // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n-            ->with('eleve') // Assurez-vous d'avoir une relation avec 'eleve'\n+            ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n             ->whereHas('eleve', function($query) use ($etablissementId) {\n-                // Filtrer les élèves par l'établissement de l'administrateur\n-                $query->where('etablissement_id', $etablissementId); \n+                $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n             })\n             ->get()\n             ->unique('eleve_id');\n-        \n-        // Charger d'autres données nécessaires\n+    \n         $emploisDuTemps = EmploisDuTemps::all();\n         $classeId = Classe::first();\n         $classeId = $classeId ? $classeId->id : null;\n     \n         return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n     }\n     \n+    \n \n  \n     public function listeElevesInscrits()\n     {\n"
                },
                {
                    "date": 1733154449310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,32 +42,33 @@\n     public function index()\n     {\n         $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n         $etablissementId = $admin ? $admin->etablissement_id : null;\n-    \n+        \n         // Vérifier si l'administrateur a un établissement associé\n         if (!$etablissementId) {\n-            // Si l'administrateur n'a pas d'établissement associé, afficher un message\n-            return redirect()->route('admin.dashboard')->withErrors('Aucun établissement associé à cet administrateur.');\n+            // Si l'administrateur n'a pas d'établissement associé, rediriger vers une page d'erreur spécifique\n+            return view('Administrateur.erreur', ['message' => 'Aucun établissement associé à cet administrateur.']);\n         }\n-    \n+        \n         // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n             ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n             ->whereHas('eleve', function($query) use ($etablissementId) {\n                 $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n             })\n             ->get()\n             ->unique('eleve_id');\n-    \n+        \n         $emploisDuTemps = EmploisDuTemps::all();\n         $classeId = Classe::first();\n         $classeId = $classeId ? $classeId->id : null;\n-    \n+        \n         return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n     }\n     \n     \n+    \n \n  \n     public function listeElevesInscrits()\n     {\n"
                },
                {
                    "date": 1733154553962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,38 +38,38 @@\n     //     return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n     // }\n \n \n-    public function index()\n-    {\n-        $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n-        $etablissementId = $admin ? $admin->etablissement_id : null;\n-        \n-        // Vérifier si l'administrateur a un établissement associé\n-        if (!$etablissementId) {\n-            // Si l'administrateur n'a pas d'établissement associé, rediriger vers une page d'erreur spécifique\n-            return view('Administrateur.erreur', ['message' => 'Aucun établissement associé à cet administrateur.']);\n-        }\n-        \n-        // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n-        $elevesInscrits = Payment::where('statut', 1)\n-            ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n-            ->whereHas('eleve', function($query) use ($etablissementId) {\n-                $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n-            })\n-            ->get()\n-            ->unique('eleve_id');\n-        \n-        $emploisDuTemps = EmploisDuTemps::all();\n-        $classeId = Classe::first();\n-        $classeId = $classeId ? $classeId->id : null;\n-        \n-        return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n+   public function index()\n+{\n+    $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n+    $etablissementId = $admin ? $admin->etablissement_id : null;\n+    \n+    // Vérifier si l'administrateur a un établissement associé\n+    if (!$etablissementId) {\n+        // Si l'administrateur n'a pas d'établissement associé, rediriger vers une page d'erreur spécifique\n+        return view('Administrateur.erreur', ['message' => 'Aucun établissement associé à cet administrateur.']);\n     }\n     \n+    // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n+    $elevesInscrits = Payment::where('statut', 1)\n+        ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n+        ->whereHas('eleve', function($query) use ($etablissementId) {\n+            $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n+        })\n+        ->get()\n+        ->unique('eleve_id');\n     \n+    $emploisDuTemps = EmploisDuTemps::all();\n+    $classeId = Classe::first();\n+    $classeId = $classeId ? $classeId->id : null;\n     \n+    return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n+}\n \n+    \n+    \n+\n  \n     public function listeElevesInscrits()\n     {\n         // Charge les paiements et les élèves (via la relation avec User et Etablissement)\n"
                },
                {
                    "date": 1733154559409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,33 +42,32 @@\n    public function index()\n {\n     $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n     $etablissementId = $admin ? $admin->etablissement_id : null;\n-    \n+\n     // Vérifier si l'administrateur a un établissement associé\n     if (!$etablissementId) {\n-        // Si l'administrateur n'a pas d'établissement associé, rediriger vers une page d'erreur spécifique\n-        return view('Administrateur.erreur', ['message' => 'Aucun établissement associé à cet administrateur.']);\n+        // Si l'administrateur n'a pas d'établissement associé, afficher un message\n+        return redirect()->route('admin.dashboard')->withErrors('Aucun établissement associé à cet administrateur.');\n     }\n-    \n+\n     // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n     $elevesInscrits = Payment::where('statut', 1)\n         ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n         ->whereHas('eleve', function($query) use ($etablissementId) {\n             $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n         })\n         ->get()\n         ->unique('eleve_id');\n-    \n+\n     $emploisDuTemps = EmploisDuTemps::all();\n     $classeId = Classe::first();\n     $classeId = $classeId ? $classeId->id : null;\n-    \n+\n     return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n }\n \n     \n-    \n \n  \n     public function listeElevesInscrits()\n     {\n"
                },
                {
                    "date": 1733154593615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,32 +42,33 @@\n    public function index()\n {\n     $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n     $etablissementId = $admin ? $admin->etablissement_id : null;\n-\n+    \n     // Vérifier si l'administrateur a un établissement associé\n     if (!$etablissementId) {\n-        // Si l'administrateur n'a pas d'établissement associé, afficher un message\n-        return redirect()->route('admin.dashboard')->withErrors('Aucun établissement associé à cet administrateur.');\n+        // Si l'administrateur n'a pas d'établissement associé, rediriger vers une page d'erreur spécifique\n+        return view('Administrateur.erreur', ['message' => 'Aucun établissement associé à cet administrateur.']);\n     }\n-\n+    \n     // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n     $elevesInscrits = Payment::where('statut', 1)\n         ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n         ->whereHas('eleve', function($query) use ($etablissementId) {\n             $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n         })\n         ->get()\n         ->unique('eleve_id');\n-\n+    \n     $emploisDuTemps = EmploisDuTemps::all();\n     $classeId = Classe::first();\n     $classeId = $classeId ? $classeId->id : null;\n-\n+    \n     return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n }\n \n     \n+    \n \n  \n     public function listeElevesInscrits()\n     {\n"
                },
                {
                    "date": 1733154720786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,38 +38,38 @@\n     //     return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n     // }\n \n \n-   public function index()\n-{\n-    $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n-    $etablissementId = $admin ? $admin->etablissement_id : null;\n-    \n-    // Vérifier si l'administrateur a un établissement associé\n-    if (!$etablissementId) {\n-        // Si l'administrateur n'a pas d'établissement associé, rediriger vers une page d'erreur spécifique\n-        return view('Administrateur.erreur', ['message' => 'Aucun établissement associé à cet administrateur.']);\n+    public function index()\n+    {\n+        $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n+        $etablissementId = $admin ? $admin->etablissement_id : null;\n+        \n+        // Vérifier si l'administrateur a un établissement associé\n+        if (!$etablissementId) {\n+            // Si l'administrateur n'a pas d'établissement associé, afficher un message\n+            return redirect()->route('admin.dashboard')->with('error', 'Aucun établissement associé à cet administrateur.');\n+        }\n+        \n+        // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n+        $elevesInscrits = Payment::where('statut', 1)\n+            ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n+            ->whereHas('eleve', function($query) use ($etablissementId) {\n+                $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n+            })\n+            ->get()\n+            ->unique('eleve_id');\n+        \n+        $emploisDuTemps = EmploisDuTemps::all();\n+        $classeId = Classe::first();\n+        $classeId = $classeId ? $classeId->id : null;\n+        \n+        return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n     }\n     \n-    // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n-    $elevesInscrits = Payment::where('statut', 1)\n-        ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n-        ->whereHas('eleve', function($query) use ($etablissementId) {\n-            $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n-        })\n-        ->get()\n-        ->unique('eleve_id');\n     \n-    $emploisDuTemps = EmploisDuTemps::all();\n-    $classeId = Classe::first();\n-    $classeId = $classeId ? $classeId->id : null;\n     \n-    return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n-}\n \n-    \n-    \n-\n  \n     public function listeElevesInscrits()\n     {\n         // Charge les paiements et les élèves (via la relation avec User et Etablissement)\n"
                },
                {
                    "date": 1733154743471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         \n         // Vérifier si l'administrateur a un établissement associé\n         if (!$etablissementId) {\n             // Si l'administrateur n'a pas d'établissement associé, afficher un message\n-            return redirect()->route('admin.dashboard')->with('error', 'Aucun établissement associé à cet administrateur.');\n+            return back('admin.dashboard')->with('error', 'Aucun établissement associé à cet administrateur.');\n         }\n         \n         // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n"
                },
                {
                    "date": 1733154760981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         \n         // Vérifier si l'administrateur a un établissement associé\n         if (!$etablissementId) {\n             // Si l'administrateur n'a pas d'établissement associé, afficher un message\n-            return back('admin.dashboard')->with('error', 'Aucun établissement associé à cet administrateur.');\n+            return back(=->with('error', 'Aucun établissement associé à cet administrateur.');\n         }\n         \n         // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n"
                },
                {
                    "date": 1733154839500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         \n         // Vérifier si l'administrateur a un établissement associé\n         if (!$etablissementId) {\n             // Si l'administrateur n'a pas d'établissement associé, afficher un message\n-            return back(=->with('error', 'Aucun établissement associé à cet administrateur.');\n+            return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n         }\n         \n         // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n"
                },
                {
                    "date": 1733154846434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,10 @@\n         // Vérifier si l'administrateur a un établissement associé\n         if (!$etablissementId) {\n             // Si l'administrateur n'a pas d'établissement associé, afficher un message\n             return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n+        }else {\n+            # code...\n         }\n         \n         // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n"
                },
                {
                    "date": 1733154852094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,23 +49,23 @@\n             // Si l'administrateur n'a pas d'établissement associé, afficher un message\n             return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n         }else {\n             # code...\n+            // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n+            $elevesInscrits = Payment::where('statut', 1)\n+                ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n+                ->whereHas('eleve', function($query) use ($etablissementId) {\n+                    $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n+                })\n+                ->get()\n+                ->unique('eleve_id');\n+            \n+            $emploisDuTemps = EmploisDuTemps::all();\n+            $classeId = Classe::first();\n+            $classeId = $classeId ? $classeId->id : null;\n         }\n         \n-        // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n-        $elevesInscrits = Payment::where('statut', 1)\n-            ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n-            ->whereHas('eleve', function($query) use ($etablissementId) {\n-                $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n-            })\n-            ->get()\n-            ->unique('eleve_id');\n         \n-        $emploisDuTemps = EmploisDuTemps::all();\n-        $classeId = Classe::first();\n-        $classeId = $classeId ? $classeId->id : null;\n-        \n         return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n     }\n     \n     \n"
                },
                {
                    "date": 1733155100646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,38 +39,39 @@\n     // }\n \n \n     public function index()\n-    {\n-        $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n-        $etablissementId = $admin ? $admin->etablissement_id : null;\n-        \n-        // Vérifier si l'administrateur a un établissement associé\n-        if (!$etablissementId) {\n-            // Si l'administrateur n'a pas d'établissement associé, afficher un message\n-            return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n-        }else {\n-            # code...\n-            // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n-            $elevesInscrits = Payment::where('statut', 1)\n-                ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n-                ->whereHas('eleve', function($query) use ($etablissementId) {\n-                    $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n-                })\n-                ->get()\n-                ->unique('eleve_id');\n-            \n-            $emploisDuTemps = EmploisDuTemps::all();\n-            $classeId = Classe::first();\n-            $classeId = $classeId ? $classeId->id : null;\n-        }\n-        \n-        \n+{\n+    $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n+    $etablissementId = $admin ? $admin->etablissement_id : null;\n+    \n+    // Initialisation des variables\n+    $elevesInscrits = [];\n+    $emploisDuTemps = EmploisDuTemps::all();\n+    $classeId = Classe::first();\n+    $classeId = $classeId ? $classeId->id : null;\n+    \n+    // Vérifier si l'administrateur a un établissement associé\n+    if (!$etablissementId) {\n+        // Si l'administrateur n'a pas d'établissement associé, afficher un message\n         return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n+    } else {\n+        // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n+        $elevesInscrits = Payment::where('statut', 1)\n+            ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n+            ->whereHas('eleve', function($query) use ($etablissementId) {\n+                $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n+            })\n+            ->get()\n+            ->unique('eleve_id');\n     }\n     \n+    return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n+}\n+\n     \n     \n+    \n \n  \n     public function listeElevesInscrits()\n     {\n"
                },
                {
                    "date": 1733157461986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,8 @@\n     $classeId = $classeId ? $classeId->id : null;\n     \n     // Vérifier si l'administrateur a un établissement associé\n     if (!$etablissementId) {\n-        // Si l'administrateur n'a pas d'établissement associé, afficher un message\n         return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n     } else {\n         // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n"
                },
                {
                    "date": 1733157467104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,8 @@\n     $elevesInscrits = [];\n     $emploisDuTemps = EmploisDuTemps::all();\n     $classeId = Classe::first();\n     $classeId = $classeId ? $classeId->id : null;\n-    \n-    // Vérifier si l'administrateur a un établissement associé\n     if (!$etablissementId) {\n         return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n     } else {\n         // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n"
                },
                {
                    "date": 1733157473697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,8 @@\n     public function index()\n {\n     $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n     $etablissementId = $admin ? $admin->etablissement_id : null;\n-    \n-    // Initialisation des variables\n     $elevesInscrits = [];\n     $emploisDuTemps = EmploisDuTemps::all();\n     $classeId = Classe::first();\n     $classeId = $classeId ? $classeId->id : null;\n"
                },
                {
                    "date": 1733157479194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,18 +40,17 @@\n \n \n     public function index()\n {\n-    $admin = Auth::guard('admin')->user(); // Récupérer l'administrateur connecté\n+    $admin = Auth::guard('admin')->user();\n     $etablissementId = $admin ? $admin->etablissement_id : null;\n     $elevesInscrits = [];\n     $emploisDuTemps = EmploisDuTemps::all();\n     $classeId = Classe::first();\n     $classeId = $classeId ? $classeId->id : null;\n     if (!$etablissementId) {\n         return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n     } else {\n-        // Si l'administrateur a un établissement, récupérer la liste des élèves inscrits\n         $elevesInscrits = Payment::where('statut', 1)\n             ->with('eleve') // Assurez-vous que la relation avec 'eleve' est définie\n             ->whereHas('eleve', function($query) use ($etablissementId) {\n                 $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n"
                },
                {
                    "date": 1733157487904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     } else {\n         $elevesInscrits = Payment::where('statut', 1)\n             ->with('eleve') \n             ->whereHas('eleve', function($query) use ($etablissementId) {\n-                $query->where('etablissement_id', $etablissementId); // Filtrer par établissement\n+                $query->where('etablissement_id', $etablissementId); \n             })\n             ->get()\n             ->unique('eleve_id');\n     }\n"
                },
                {
                    "date": 1733340777200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n             // Récupérer les emplois du temps associés à l'établissement\n             $emploisDuTemps = EmploisDuTemps::whereHas('classe', function ($query) use ($etablissement) {\n                 $query->where('etablissement_id', $etablissement->id);\n             })->get();\n-            $emploisDuTemps\n+            $emploisDuTemps=\n         \n             return view('Administrateur.admindashboard', compact('elevesInscrits', 'emploisDuTemps', 'classeId'));\n         }\n         \n"
                }
            ],
            "date": 1728140094485,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Cours;\nuse App\\Models\\Classe;\nuse App\\Models\\Payment;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Etablissement;\nuse App\\Models\\Administrateur;\nuse App\\Models\\EmploisDuTemps;\nuse App\\Mail\\NouveauCompteMail;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Mail;\nuse App\\Http\\Requests\\AjoutProfRequest;\nuse App\\Http\\Requests\\AdminRegisterRequest;\n\nclass AdministrateurController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        $elevesInscrits = Payment::where('statut', 1)\n        ->with('eleve')\n        ->get()\n        ->unique('eleve_id');\n        $emploisDuTemps = EmploisDuTemps::all();\n        $classeId = Classe::first();\n        $classeId = $classeId ? $classeId->id : null;\n        return view('Administrateur.admindashboard',compact('elevesInscrits','emploisDuTemps','classeId'));\n    }\n\n    public function listeElevesInscrits()\n    {\n        $elevesInscrits = Payment::where('statut', 1)->with('eleve')->get();\n        return view('Administrateur.admindashboard', compact('elevesInscrits'));\n    }\n    // $emploisDuTemps = EmploisDuTemps::all();\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        return view('Administrateur.formulaireAdministrateur');\n    }\n\n\n    public function listProfessors()\n    {\n       \n        $professeurs = User::whereHas('roles', function($query) {\n            $query->where('nom', 'professeurs');\n        })->where('is_completed', false)->get();\n\n        return view('Administrateur.Professeurs.list', compact('professeurs'));\n    }\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(AdminRegisterRequest $request)\n    {\n        $validatedData = $request->validated();\n        $validatedData['password'] = Hash::make($validatedData['password']);\n\n        Administrateur::create($validatedData);\n        return redirect()->route('admin.login')->with('success', 'Inscription réussie, veuillez vous connecter !');\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Administrateur  $administrateur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Administrateur $administrateur)\n    {\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\Administrateur  $administrateur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Administrateur $administrateur)\n    \n       \n        {\n            $admin = auth()->user();\n            return view('Administrateur.updateProfil', compact('admin'));\n        }\n    \n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Administrateur  $administrateur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Administrateur $administrateur)\n    {\n        $admin = Administrateur::find(auth()->id()); \n\n        $validatedData = $request->validate([\n            'adresse' => 'required|string|max:255',\n            'telephone' => 'required|string|max:20',\n            'email' => 'required|email|max:255',\n        ]);\n    \n        $admin->adresse = $validatedData['adresse'];\n        $admin->telephone = $validatedData['telephone'];\n        $admin->email = $validatedData['email'];\n\n        $admin->save();\n    \n        return redirect()->route('admin.profile.edit')->with('success', 'Profil mis à jour avec succès.');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Administrateur  $administrateur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Administrateur $administrateur)\n    {\n        //\n    }\n      public function formulaire()\n      {\n        $etablissements = Etablissement::all(); \n        return view('Administrateur.formulaireAjouProf', compact('etablissements'));\n      }\n\n    public function ajouterProfesseur(AjoutProfRequest $request)\n    {\n        $validatedData = $request->validated();\n\n    if (empty($validatedData['password'])) {\n        $validatedData['password'] = Str::random(8);\n    }\n    $hashedPassword = Hash::make($validatedData['password']);\n\n    // Création d'un nouvel utilisateur avec les données validées\n    $user = User::create([\n        'email' => $validatedData['email'],\n        'password' => $hashedPassword,\n        'etablissement_id' => $validatedData['etablissement_id'],\n    ]);\n    $roleId = null;\n    switch ($request->typecompte) {\n        case 'professeurs':\n            $roleId = 1;\n            break;\n        case 'eleves':\n            $roleId = 2;\n            break;\n        case 'parents':\n            $roleId = 3;\n            break;\n    }\n    if ($roleId) {\n        DB::table('usersroles')->insert([\n            'user_id' => $user->id,\n            'role_id' => $roleId,\n        ]);\n    }\n\n   \n    $identifiants = [\n        'email' => $validatedData['email'],\n        'password' => $validatedData['password'],\n    ];\n\n    Mail::to($validatedData['email'])->send(new NouveauCompteMail($identifiants));\n    // Redirection avec un message de succès et les identifiants\n    return redirect()->route('list.index')->with([\n        'success' => 'Utilisateur créé avec succès.',\n        'identifiants' => $identifiants,\n    ]);\n}\n\n\npublic function listeCours($id) \n{\n    $professeur = auth()->user()->professeur;\n    $classe = Classe::findOrFail($id);\n    $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n    return view('Administrateur.Classe.courList', compact('classe', 'cours'));\n}\n\npublic function destroyProfessor($id)\n{\n    $professeur = User::find($id);\n\n    if ($professeur) {\n        $professeur->is_completed = true;\n        $professeur->save();\n        return redirect()->route('professeurs.list')->with('success', 'Le compte du professeur a été désactivé avec succès.');\n    }\n\n    return redirect()->route('professeurs.list')->with('error', 'Le professeur n\\'a pas été trouvé.');\n}\n\n\n}"
        }
    ]
}