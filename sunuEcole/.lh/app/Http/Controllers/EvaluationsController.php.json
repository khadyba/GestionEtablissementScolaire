{
    "sourceFile": "app/Http/Controllers/EvaluationsController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1731339868172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731340209256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,15 @@\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-    \n+\n     public function create($classeId)\n     {\n         $professeur = auth()->user()->professeur;\n         $classe = Classe::findOrFail($classeId);\n         if (!$professeur->classes->contains($classe)) {\n-            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n+            return redirect()->back()->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n         }\n     \n         return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n     }\n"
                },
                {
                    "date": 1731340265790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,14 @@\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-\n     public function create($classeId)\n     {\n         $professeur = auth()->user()->professeur;\n         $classe = Classe::findOrFail($classeId);\n         if (!$professeur->classes->contains($classe)) {\n-            return redirect()->back()->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n+            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n         }\n     \n         return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n     }\n"
                },
                {
                    "date": 1731340629905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,18 +30,18 @@\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-    public function create($classeId)\n-    {\n-        $professeur = auth()->user()->professeur;\n-        $classe = Classe::findOrFail($classeId);\n-        if (!$professeur->classes->contains($classe)) {\n-            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n-        }\n+    // public function create($classeId)\n+    // {\n+    //     $professeur = auth()->user()->professeur;\n+    //     $classe = Classe::findOrFail($classeId);\n+    //     if (!$professeur->classes->contains($classe)) {\n+    //         return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n+    //     }\n     \n-        return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n-    }\n+    //     return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n+    // }\n     \n    \n     \n     /**\n"
                },
                {
                    "date": 1731340844145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,23 @@\n     //     }\n     \n     //     return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n     // }\n+    public function create($classeId)\n+    {\n+        $professeur = auth()->user()->professeur;\n+        $classe = Classe::findOrFail($classeId);\n+        \n+        // Vérifiez si le professeur est affecté à la classe\n+        if (!$professeur->classes->contains($classe)) {\n+            dd('Redirection avec erreur'); // Temporaire, pour vérifier si ce code est atteint\n+            return redirect()->back()->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n+        }\n     \n+        return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n+    }\n+    \n+\n    \n     \n     /**\n      * Store a newly created resource in storage.\n"
                },
                {
                    "date": 1731340923067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         $classe = Classe::findOrFail($classeId);\n         \n         // Vérifiez si le professeur est affecté à la classe\n         if (!$professeur->classes->contains($classe)) {\n-            dd('Redirection avec erreur'); // Temporaire, pour vérifier si ce code est atteint\n+            // dd('Redirection avec erreur'); // Temporaire, pour vérifier si ce code est atteint\n             return redirect()->back()->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n         }\n     \n         return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n"
                },
                {
                    "date": 1731341012224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,10 @@\n         \n         // Vérifiez si le professeur est affecté à la classe\n         if (!$professeur->classes->contains($classe)) {\n             // dd('Redirection avec erreur'); // Temporaire, pour vérifier si ce code est atteint\n-            return redirect()->back()->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n+            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n+\n         }\n     \n         return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n     }\n"
                },
                {
                    "date": 1731341316920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n             $evaluation->professeur_id = $professeur->id;\n             $evaluation->classe_id = $validatedData['classe_id'];\n             $evaluation->save();\n     \n-            return redirect()->route('professeurs.classes.index.prof')\n+            return redirect()->route('professeurs.classes.index.')\n                              ->with('success', 'Évaluation programmée avec succès.');\n         } catch (\\Exception $e) {\n             return back()->withErrors(['error' => 'Une erreur est survenue lors de la programmation de l\\'évaluation.']);\n         }\n"
                },
                {
                    "date": 1731341322292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,8 @@\n             // Vérifier si le professeur est autorisé à programmer une évaluation pour cette classe\n             if (!$professeur->classes->contains($classe)) {\n                 return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n             }\n-    \n             $evaluation = new Evaluations();\n             $evaluation->titre = $validatedData['titre'];\n             $evaluation->type = $validatedData['type'];\n             $evaluation->jours = $validatedData['jours'];\n@@ -94,9 +93,9 @@\n             $evaluation->professeur_id = $professeur->id;\n             $evaluation->classe_id = $validatedData['classe_id'];\n             $evaluation->save();\n     \n-            return redirect()->route('professeurs.classes.index.')\n+            return redirect()->route('professeurs.classes.index')\n                              ->with('success', 'Évaluation programmée avec succès.');\n         } catch (\\Exception $e) {\n             return back()->withErrors(['error' => 'Une erreur est survenue lors de la programmation de l\\'évaluation.']);\n         }\n"
                },
                {
                    "date": 1731341586819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,14 +19,14 @@\n     {\n         //\n     }\n \n-    public function listEvaluations($classeId)\n-    {\n-        $classe = Classe::findOrFail($classeId);\n-        $evaluations = Evaluations::where('classe_id', $classeId)->get();\n-        return view('Professeurs.Evaluations.listEvaluation', compact('classe', 'evaluations'));\n-    }\n+    // public function listEvaluations($classeId)\n+    // {\n+    //     $classe = Classe::findOrFail($classeId);\n+    //     $evaluations = Evaluations::where('classe_id', $classeId)->get();\n+    //     return view('Professeurs.Evaluations.listEvaluation', compact('classe', 'evaluations'));\n+    // }\n     /**\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n"
                },
                {
                    "date": 1731343022262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,24 @@\n     //     $classe = Classe::findOrFail($classeId);\n     //     $evaluations = Evaluations::where('classe_id', $classeId)->get();\n     //     return view('Professeurs.Evaluations.listEvaluation', compact('classe', 'evaluations'));\n     // }\n+    public function listEvaluations($classeId)\n+{\n+    $classe = Classe::findOrFail($classeId);\n+    $professeur = auth()->user()->professeur;\n+\n+    // Vérifiez si le professeur est affecté à la classe\n+    if (!$professeur->classes->contains($classe)) {\n+        return redirect()->route('professeurs.classes.index')\n+            ->with('error', 'Vous n\\'êtes pas autorisé à voir les évaluations de cette classe.');\n+    }\n+\n+    // Si le professeur est affecté à la classe, récupérez les évaluations\n+    $evaluations = Evaluations::where('classe_id', $classeId)->get();\n+    return view('Professeurs.Evaluations.listEvaluation', compact('classe', 'evaluations'));\n+}\n+\n     /**\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n@@ -101,21 +117,21 @@\n         }\n     }\n     \n \n-    public function showAddNotesForm($classeId, $evaluationId)\n-{\n-    $classe = Classe::findOrFail($classeId);\n-    $evaluation = Evaluations::findOrFail($evaluationId);\n-    $professeurId = Auth::user()->professeur->id;\n+//     public function showAddNotesForm($classeId, $evaluationId)\n+// {\n+//     $classe = Classe::findOrFail($classeId);\n+//     $evaluation = Evaluations::findOrFail($evaluationId);\n+//     $professeurId = Auth::user()->professeur->id;\n \n-    // Récupérer les élèves qui n'ont pas encore de notes pour cette évaluation spécifique\n-    $eleves = $classe->eleve()->whereDoesntHave('notes', function($query) use ($evaluation) {\n-        $query->where('evaluation_id', $evaluation->id);\n-    })->get();\n+//     // Récupérer les élèves qui n'ont pas encore de notes pour cette évaluation spécifique\n+//     $eleves = $classe->eleve()->whereDoesntHave('notes', function($query) use ($evaluation) {\n+//         $query->where('evaluation_id', $evaluation->id);\n+//     })->get();\n \n-    return view('Professeurs.Evaluations.add_notes', compact('classe', 'evaluation', 'eleves'));\n-}\n+//     return view('Professeurs.Evaluations.add_notes', compact('classe', 'evaluation', 'eleves'));\n+// }\n \n public function storeNotes(Request $request, $classeId)\n {\n     $professeur = auth()->user()->professeur;\n"
                },
                {
                    "date": 1731343170206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,11 @@\n \n //     return view('Professeurs.Evaluations.add_notes', compact('classe', 'evaluation', 'eleves'));\n // }\n \n+\n+\n+\n public function storeNotes(Request $request, $classeId)\n {\n     $professeur = auth()->user()->professeur;\n     $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n"
                },
                {
                    "date": 1731344463359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,18 +46,9 @@\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-    // public function create($classeId)\n-    // {\n-    //     $professeur = auth()->user()->professeur;\n-    //     $classe = Classe::findOrFail($classeId);\n-    //     if (!$professeur->classes->contains($classe)) {\n-    //         return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n-    //     }\n-    \n-    //     return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n-    // }\n+   \n     public function create($classeId)\n     {\n         $professeur = auth()->user()->professeur;\n         $classe = Classe::findOrFail($classeId);\n@@ -117,21 +108,21 @@\n         }\n     }\n     \n \n-//     public function showAddNotesForm($classeId, $evaluationId)\n-// {\n-//     $classe = Classe::findOrFail($classeId);\n-//     $evaluation = Evaluations::findOrFail($evaluationId);\n-//     $professeurId = Auth::user()->professeur->id;\n+    public function showAddNotesForm($classeId, $evaluationId)\n+{\n+    $classe = Classe::findOrFail($classeId);\n+    $evaluation = Evaluations::findOrFail($evaluationId);\n+    $professeurId = Auth::user()->professeur->id;\n \n-//     // Récupérer les élèves qui n'ont pas encore de notes pour cette évaluation spécifique\n-//     $eleves = $classe->eleve()->whereDoesntHave('notes', function($query) use ($evaluation) {\n-//         $query->where('evaluation_id', $evaluation->id);\n-//     })->get();\n+    // Récupérer les élèves qui n'ont pas encore de notes pour cette évaluation spécifique\n+    $eleves = $classe->eleve()->whereDoesntHave('notes', function($query) use ($evaluation) {\n+        $query->where('evaluation_id', $evaluation->id);\n+    })->get();\n \n-//     return view('Professeurs.Evaluations.add_notes', compact('classe', 'evaluation', 'eleves'));\n-// }\n+    return view('Professeurs.Evaluations.add_notes', compact('classe', 'evaluation', 'eleves'));\n+}\n \n \n \n \n"
                },
                {
                    "date": 1731344469645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-   \n     public function create($classeId)\n     {\n         $professeur = auth()->user()->professeur;\n         $classe = Classe::findOrFail($classeId);\n"
                },
                {
                    "date": 1731411385318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n                 'eleve_id' => $noteData['eleve_id'],\n                 'evaluation_id' => $noteData['evaluation_id'],\n             ],\n             [\n-                'valeur' => $noteData['valeur'] ?? null, // Utilisez null par défaut\n+                'valeur' => $noteData['valeur'] ?? null, \n                 'coefficient' => $noteData['coefficient'] ?? null, // Utilisez null par défaut\n                 'appreciations' => $noteData['appreciations'] ?? '',\n                 'professeur_id' => $professeur->id,\n             ]\n"
                },
                {
                    "date": 1731411525286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,31 +124,31 @@\n \n \n \n \n-public function storeNotes(Request $request, $classeId)\n-{\n-    $professeur = auth()->user()->professeur;\n-    $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n+// public function storeNotes(Request $request, $classeId)\n+// {\n+//     $professeur = auth()->user()->professeur;\n+//     $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n \n-    foreach ($data as $eleveId => $noteData) {\n-        Notes::updateOrCreate(\n-            [\n-                'eleve_id' => $noteData['eleve_id'],\n-                'evaluation_id' => $noteData['evaluation_id'],\n-            ],\n-            [\n-                'valeur' => $noteData['valeur'] ?? null, \n-                'coefficient' => $noteData['coefficient'] ?? null, // Utilisez null par défaut\n-                'appreciations' => $noteData['appreciations'] ?? '',\n-                'professeur_id' => $professeur->id,\n-            ]\n-        );\n-    }\n+//     foreach ($data as $eleveId => $noteData) {\n+//         Notes::updateOrCreate(\n+//             [\n+//                 'eleve_id' => $noteData['eleve_id'],\n+//                 'evaluation_id' => $noteData['evaluation_id'],\n+//             ],\n+//             [\n+//                 'valeur' => $noteData['valeur'] ?? null, \n+//                 'coefficient' => $noteData['coefficient'] ?? null, \n+//                 'appreciations' => $noteData['appreciations'] ?? '',\n+//                 'professeur_id' => $professeur->id,\n+//             ]\n+//         );\n+//     }\n \n-    return redirect()->route('professeurs.notes.list', $classeId)\n-        ->with('success', 'Notes enregistrées avec succès.');\n-}\n+//     return redirect()->route('professeurs.notes.list', $classeId)\n+//         ->with('success', 'Notes enregistrées avec succès.');\n+// }\n \n \n \n     /**\n"
                },
                {
                    "date": 1731411670066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n use App\\Models\\Notes;\n use App\\Models\\Classe;\n use App\\Models\\Evaluations;\n use Illuminate\\Http\\Request;\n+use App\\Models\\Eleves; // Ajouter cette ligne d'importation\n use Illuminate\\Support\\Facades\\Auth;\n \n class EvaluationsController extends Controller\n {\n@@ -148,10 +149,40 @@\n //     return redirect()->route('professeurs.notes.list', $classeId)\n //         ->with('success', 'Notes enregistrées avec succès.');\n // }\n \n+public function storeNotes(Request $request, $classeId)\n+{\n+    $professeur = auth()->user()->professeur;\n+    $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n \n+    foreach ($data as $eleveId => $noteData) {\n+        // Récupérer l'élève à partir de son ID\n+        $eleve = Eleves::findOrFail($eleveId);\n+        \n+        // Lier la classe de l'élève avec celle du professeur (si nécessaire)\n+        $classeId = $eleve->classe_id; // Assurez-vous que l'élève a une classe associée\n+        \n+        Notes::updateOrCreate(\n+            [\n+                'eleve_id' => $noteData['eleve_id'],\n+                'evaluation_id' => $noteData['evaluation_id'],\n+            ],\n+            [\n+                'valeur' => $noteData['valeur'] ?? null, \n+                'coefficient' => $noteData['coefficient'] ?? null, \n+                'appreciations' => $noteData['appreciations'] ?? '',\n+                'professeur_id' => $professeur->id,\n+                'classe_id' => $classeId,  // Ajouter ici la classe de l'élève\n+            ]\n+        );\n+    }\n \n+    return redirect()->route('professeurs.notes.list', $classeId)\n+        ->with('success', 'Notes enregistrées avec succès.');\n+}\n+\n+\n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Evaluations  $evaluations\n"
                },
                {
                    "date": 1731412354635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use App\\Models\\Notes;\n use App\\Models\\Classe;\n use App\\Models\\Evaluations;\n use Illuminate\\Http\\Request;\n-use App\\Models\\Eleves; // Ajouter cette ligne d'importation\n+use App\\Models\\Eleves; \n use Illuminate\\Support\\Facades\\Auth;\n \n class EvaluationsController extends Controller\n {\n@@ -155,14 +155,12 @@\n     $professeur = auth()->user()->professeur;\n     $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n \n     foreach ($data as $eleveId => $noteData) {\n-        // Récupérer l'élève à partir de son ID\n-        $eleve = Eleves::findOrFail($eleveId);\n-        \n-        // Lier la classe de l'élève avec celle du professeur (si nécessaire)\n-        $classeId = $eleve->classe_id; // Assurez-vous que l'élève a une classe associée\n-        \n+        // Ajoutez la classe_id si nécessaire\n+        $noteData['classe_id'] = $classeId;\n+\n+        // Effectuer la création ou la mise à jour de la note\n         Notes::updateOrCreate(\n             [\n                 'eleve_id' => $noteData['eleve_id'],\n                 'evaluation_id' => $noteData['evaluation_id'],\n@@ -171,18 +169,17 @@\n                 'valeur' => $noteData['valeur'] ?? null, \n                 'coefficient' => $noteData['coefficient'] ?? null, \n                 'appreciations' => $noteData['appreciations'] ?? '',\n                 'professeur_id' => $professeur->id,\n-                'classe_id' => $classeId,  // Ajouter ici la classe de l'élève\n+                'classe_id' => $noteData['classe_id'], // Ajout de la classe_id\n             ]\n         );\n     }\n \n     return redirect()->route('professeurs.notes.list', $classeId)\n         ->with('success', 'Notes enregistrées avec succès.');\n }\n \n-\n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Evaluations  $evaluations\n"
                },
                {
                    "date": 1731412942342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,35 +151,47 @@\n // }\n \n public function storeNotes(Request $request, $classeId)\n {\n+    // Récupérer l'utilisateur (professeur)\n     $professeur = auth()->user()->professeur;\n-    $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n \n+    // Récupérer les données envoyées via le formulaire\n+    $data = $request->input('notes', []); // Utiliser une valeur par défaut si nécessaire\n+\n+    // Vérifier si la classe existe\n+    $classe = Classe::find($classeId);\n+    if (!$classe) {\n+        return redirect()->back()->withErrors('Classe non trouvée.');\n+    }\n+\n+    // Parcourir les données de notes pour les enregistrer ou mettre à jour\n     foreach ($data as $eleveId => $noteData) {\n-        // Ajoutez la classe_id si nécessaire\n+        // Ajoutez la classe_id dans les données avant l'insertion\n         $noteData['classe_id'] = $classeId;\n \n-        // Effectuer la création ou la mise à jour de la note\n+        // Insertion ou mise à jour des notes\n         Notes::updateOrCreate(\n             [\n                 'eleve_id' => $noteData['eleve_id'],\n                 'evaluation_id' => $noteData['evaluation_id'],\n             ],\n             [\n-                'valeur' => $noteData['valeur'] ?? null, \n-                'coefficient' => $noteData['coefficient'] ?? null, \n+                'valeur' => $noteData['valeur'] ?? null,\n+                'coefficient' => $noteData['coefficient'] ?? null,\n                 'appreciations' => $noteData['appreciations'] ?? '',\n                 'professeur_id' => $professeur->id,\n-                'classe_id' => $noteData['classe_id'], // Ajout de la classe_id\n+                'classe_id' => $noteData['classe_id'], // Utiliser la classe_id récupérée de la route\n             ]\n         );\n     }\n \n+    // Retourner à la liste des notes avec un message de succès\n     return redirect()->route('professeurs.notes.list', $classeId)\n         ->with('success', 'Notes enregistrées avec succès.');\n }\n \n+\n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Evaluations  $evaluations\n"
                },
                {
                    "date": 1731417251576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n     }\n \n     // Parcourir les données de notes pour les enregistrer ou mettre à jour\n     foreach ($data as $eleveId => $noteData) {\n-        // Ajoutez la classe_id dans les données avant l'insertion\n+        // Ajouter explicitement la classe_id dans les données avant l'insertion\n         $noteData['classe_id'] = $classeId;\n \n         // Insertion ou mise à jour des notes\n         Notes::updateOrCreate(\n@@ -179,9 +179,9 @@\n                 'valeur' => $noteData['valeur'] ?? null,\n                 'coefficient' => $noteData['coefficient'] ?? null,\n                 'appreciations' => $noteData['appreciations'] ?? '',\n                 'professeur_id' => $professeur->id,\n-                'classe_id' => $noteData['classe_id'], // Utiliser la classe_id récupérée de la route\n+                'classe_id' => $noteData['classe_id'], // Insérer la classe_id\n             ]\n         );\n     }\n \n@@ -190,8 +190,9 @@\n         ->with('success', 'Notes enregistrées avec succès.');\n }\n \n \n+\n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Evaluations  $evaluations\n"
                },
                {
                    "date": 1731417258907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n                 'valeur' => $noteData['valeur'] ?? null,\n                 'coefficient' => $noteData['coefficient'] ?? null,\n                 'appreciations' => $noteData['appreciations'] ?? '',\n                 'professeur_id' => $professeur->id,\n-                'classe_id' => $noteData['classe_id'], // Insérer la classe_id\n+                'classe_id' => $noteData['classe_id'],\n             ]\n         );\n     }\n \n"
                },
                {
                    "date": 1731417815580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n                 'valeur' => $noteData['valeur'] ?? null,\n                 'coefficient' => $noteData['coefficient'] ?? null,\n                 'appreciations' => $noteData['appreciations'] ?? '',\n                 'professeur_id' => $professeur->id,\n-                'classe_id' => $noteData['classe_id'],\n+                'classe_id' => $noteData['classe_id']?? '',\n             ]\n         );\n     }\n \n"
                },
                {
                    "date": 1731418872161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,8 @@\n         try {\n             $professeur = auth()->user()->professeur;\n             $classe = Classe::findOrFail($validatedData['classe_id']);\n     \n-            // Vérifier si le professeur est autorisé à programmer une évaluation pour cette classe\n             if (!$professeur->classes->contains($classe)) {\n                 return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n             }\n             $evaluation = new Evaluations();\n@@ -179,9 +178,9 @@\n                 'valeur' => $noteData['valeur'] ?? null,\n                 'coefficient' => $noteData['coefficient'] ?? null,\n                 'appreciations' => $noteData['appreciations'] ?? '',\n                 'professeur_id' => $professeur->id,\n-                'classe_id' => $noteData['classe_id']?? '',\n+                'classe_id' => $noteData['classe_id'] ?? '',\n             ]\n         );\n     }\n \n"
                },
                {
                    "date": 1731418879726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,8 @@\n         $classe = Classe::findOrFail($classeId);\n         \n         // Vérifiez si le professeur est affecté à la classe\n         if (!$professeur->classes->contains($classe)) {\n-            // dd('Redirection avec erreur'); // Temporaire, pour vérifier si ce code est atteint\n             return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n \n         }\n     \n@@ -85,10 +84,9 @@\n     \n         try {\n             $professeur = auth()->user()->professeur;\n             $classe = Classe::findOrFail($validatedData['classe_id']);\n-    \n-            if (!$professeur->classes->contains($classe)) {\n+                if (!$professeur->classes->contains($classe)) {\n                 return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n             }\n             $evaluation = new Evaluations();\n             $evaluation->titre = $validatedData['titre'];\n"
                },
                {
                    "date": 1731418885726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,8 @@\n     public function create($classeId)\n     {\n         $professeur = auth()->user()->professeur;\n         $classe = Classe::findOrFail($classeId);\n-        \n-        // Vérifiez si le professeur est affecté à la classe\n         if (!$professeur->classes->contains($classe)) {\n             return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.');\n \n         }\n"
                },
                {
                    "date": 1731418892011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,12 +58,8 @@\n         }\n     \n         return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n     }\n-    \n-\n-   \n-    \n     /**\n      * Store a newly created resource in storage.\n      *\n      * @param  \\Illuminate\\Http\\Request  $request\n"
                },
                {
                    "date": 1731418900856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,15 +19,8 @@\n     public function index()\n     {\n         //\n     }\n-\n-    // public function listEvaluations($classeId)\n-    // {\n-    //     $classe = Classe::findOrFail($classeId);\n-    //     $evaluations = Evaluations::where('classe_id', $classeId)->get();\n-    //     return view('Professeurs.Evaluations.listEvaluation', compact('classe', 'evaluations'));\n-    // }\n     public function listEvaluations($classeId)\n {\n     $classe = Classe::findOrFail($classeId);\n     $professeur = auth()->user()->professeur;\n"
                },
                {
                    "date": 1731418914200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,32 +109,10 @@\n \n \n \n \n-// public function storeNotes(Request $request, $classeId)\n-// {\n-//     $professeur = auth()->user()->professeur;\n-//     $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n \n-//     foreach ($data as $eleveId => $noteData) {\n-//         Notes::updateOrCreate(\n-//             [\n-//                 'eleve_id' => $noteData['eleve_id'],\n-//                 'evaluation_id' => $noteData['evaluation_id'],\n-//             ],\n-//             [\n-//                 'valeur' => $noteData['valeur'] ?? null, \n-//                 'coefficient' => $noteData['coefficient'] ?? null, \n-//                 'appreciations' => $noteData['appreciations'] ?? '',\n-//                 'professeur_id' => $professeur->id,\n-//             ]\n-//         );\n-//     }\n \n-//     return redirect()->route('professeurs.notes.list', $classeId)\n-//         ->with('success', 'Notes enregistrées avec succès.');\n-// }\n-\n public function storeNotes(Request $request, $classeId)\n {\n     // Récupérer l'utilisateur (professeur)\n     $professeur = auth()->user()->professeur;\n"
                },
                {
                    "date": 1731418924723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,14 +105,8 @@\n     })->get();\n \n     return view('Professeurs.Evaluations.add_notes', compact('classe', 'evaluation', 'eleves'));\n }\n-\n-\n-\n-\n-\n-\n public function storeNotes(Request $request, $classeId)\n {\n     // Récupérer l'utilisateur (professeur)\n     $professeur = auth()->user()->professeur;\n@@ -124,9 +118,8 @@\n     $classe = Classe::find($classeId);\n     if (!$classe) {\n         return redirect()->back()->withErrors('Classe non trouvée.');\n     }\n-\n     // Parcourir les données de notes pour les enregistrer ou mettre à jour\n     foreach ($data as $eleveId => $noteData) {\n         // Ajouter explicitement la classe_id dans les données avant l'insertion\n         $noteData['classe_id'] = $classeId;\n"
                },
                {
                    "date": 1731418932611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,8 @@\n     // Parcourir les données de notes pour les enregistrer ou mettre à jour\n     foreach ($data as $eleveId => $noteData) {\n         // Ajouter explicitement la classe_id dans les données avant l'insertion\n         $noteData['classe_id'] = $classeId;\n-\n         // Insertion ou mise à jour des notes\n         Notes::updateOrCreate(\n             [\n                 'eleve_id' => $noteData['eleve_id'],\n@@ -139,9 +138,8 @@\n             ]\n         );\n     }\n \n-    // Retourner à la liste des notes avec un message de succès\n     return redirect()->route('professeurs.notes.list', $classeId)\n         ->with('success', 'Notes enregistrées avec succès.');\n }\n \n"
                },
                {
                    "date": 1731418937896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,15 +137,11 @@\n                 'classe_id' => $noteData['classe_id'] ?? '',\n             ]\n         );\n     }\n-\n     return redirect()->route('professeurs.notes.list', $classeId)\n         ->with('success', 'Notes enregistrées avec succès.');\n }\n-\n-\n-\n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Evaluations  $evaluations\n"
                }
            ],
            "date": 1731339868172,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Notes;\nuse App\\Models\\Classe;\nuse App\\Models\\Evaluations;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass EvaluationsController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        //\n    }\n\n    public function listEvaluations($classeId)\n    {\n        $classe = Classe::findOrFail($classeId);\n        $evaluations = Evaluations::where('classe_id', $classeId)->get();\n        return view('Professeurs.Evaluations.listEvaluation', compact('classe', 'evaluations'));\n    }\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    \n    public function create($classeId)\n    {\n        $professeur = auth()->user()->professeur;\n        $classe = Classe::findOrFail($classeId);\n        if (!$professeur->classes->contains($classe)) {\n            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n        }\n    \n        return view('Professeurs.Evaluations.evaluationCreate', compact('classe'));\n    }\n    \n   \n    \n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        $validatedData = $request->validate([\n            'titre' => 'required|string|max:255',\n            'type' => 'required|string|max:255',\n            'jours' => 'required|date',\n            'heure_debut' => 'required|date_format:H:i',\n            'heure_fin' => 'required|date_format:H:i',\n            'classe_id' => 'required|exists:classes,id',\n        ]);\n    \n        try {\n            $professeur = auth()->user()->professeur;\n            $classe = Classe::findOrFail($validatedData['classe_id']);\n    \n            // Vérifier si le professeur est autorisé à programmer une évaluation pour cette classe\n            if (!$professeur->classes->contains($classe)) {\n                return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à programmer une évaluation pour cette classe.']);\n            }\n    \n            $evaluation = new Evaluations();\n            $evaluation->titre = $validatedData['titre'];\n            $evaluation->type = $validatedData['type'];\n            $evaluation->jours = $validatedData['jours'];\n            $evaluation->heure_debut = $validatedData['heure_debut'];\n            $evaluation->heure_fin = $validatedData['heure_fin'];\n            $evaluation->professeur_id = $professeur->id;\n            $evaluation->classe_id = $validatedData['classe_id'];\n            $evaluation->save();\n    \n            return redirect()->route('professeurs.classes.index.prof')\n                             ->with('success', 'Évaluation programmée avec succès.');\n        } catch (\\Exception $e) {\n            return back()->withErrors(['error' => 'Une erreur est survenue lors de la programmation de l\\'évaluation.']);\n        }\n    }\n    \n\n    public function showAddNotesForm($classeId, $evaluationId)\n{\n    $classe = Classe::findOrFail($classeId);\n    $evaluation = Evaluations::findOrFail($evaluationId);\n    $professeurId = Auth::user()->professeur->id;\n\n    // Récupérer les élèves qui n'ont pas encore de notes pour cette évaluation spécifique\n    $eleves = $classe->eleve()->whereDoesntHave('notes', function($query) use ($evaluation) {\n        $query->where('evaluation_id', $evaluation->id);\n    })->get();\n\n    return view('Professeurs.Evaluations.add_notes', compact('classe', 'evaluation', 'eleves'));\n}\n\npublic function storeNotes(Request $request, $classeId)\n{\n    $professeur = auth()->user()->professeur;\n    $data = $request->input('notes', []); // Ajoutez une valeur par défaut pour éviter les erreurs\n\n    foreach ($data as $eleveId => $noteData) {\n        Notes::updateOrCreate(\n            [\n                'eleve_id' => $noteData['eleve_id'],\n                'evaluation_id' => $noteData['evaluation_id'],\n            ],\n            [\n                'valeur' => $noteData['valeur'] ?? null, // Utilisez null par défaut\n                'coefficient' => $noteData['coefficient'] ?? null, // Utilisez null par défaut\n                'appreciations' => $noteData['appreciations'] ?? '',\n                'professeur_id' => $professeur->id,\n            ]\n        );\n    }\n\n    return redirect()->route('professeurs.notes.list', $classeId)\n        ->with('success', 'Notes enregistrées avec succès.');\n}\n\n\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Evaluations  $evaluations\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Evaluations $evaluations)\n    {\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\Evaluations  $evaluations\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Evaluations $evaluations)\n    {\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Evaluations  $evaluations\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Evaluations $evaluations)\n    {\n        //\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Evaluations  $evaluations\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Evaluations $evaluations)\n    {\n        //\n    }\n}\n"
        }
    ]
}