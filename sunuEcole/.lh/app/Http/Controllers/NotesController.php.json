{
    "sourceFile": "app/Http/Controllers/NotesController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1731341813518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731341850457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,23 @@\n     //         ->get();\n         \n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n+    public function index()\n+{\n+    $professeur = auth()->user()->professeur;\n+\n+    // Récupérer uniquement les notes des classes auxquelles le professeur est affecté\n+    $notes = Note::where('professeur_id', $professeur->id)\n+        ->whereHas('classe', function ($query) use ($professeur) {\n+            $query->whereIn('id', $professeur->classes->pluck('id'));\n+        })\n+        ->where('is_deleted', false)\n+        ->get();\n     \n+    return view('Professeurs.Evaluations.noteslist', compact('notes'));\n+}\n+\n     public function genererBulletin($classeId, $eleveId)\n     {\n         $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n         $classe = Classe::findOrFail($classeId);\n"
                },
                {
                    "date": 1731341859346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n {\n     $professeur = auth()->user()->professeur;\n \n     // Récupérer uniquement les notes des classes auxquelles le professeur est affecté\n-    $notes = Note::where('professeur_id', $professeur->id)\n+    $notes = Notes::where('professeur_id', $professeur->id)\n         ->whereHas('classe', function ($query) use ($professeur) {\n             $query->whereIn('id', $professeur->classes->pluck('id'));\n         })\n         ->where('is_deleted', false)\n"
                },
                {
                    "date": 1731342613430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,22 +28,32 @@\n     //         ->get();\n         \n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n-    public function index()\n-{\n-    $professeur = auth()->user()->professeur;\n-\n-    // Récupérer uniquement les notes des classes auxquelles le professeur est affecté\n-    $notes = Notes::where('professeur_id', $professeur->id)\n-        ->whereHas('classe', function ($query) use ($professeur) {\n-            $query->whereIn('id', $professeur->classes->pluck('id'));\n-        })\n-        ->where('is_deleted', false)\n-        ->get();\n+    public function index($classeId)\n+    {\n+        // Récupérer le professeur connecté\n+        $professeur = auth()->user()->professeur;\n     \n-    return view('Professeurs.Evaluations.noteslist', compact('notes'));\n-}\n+        // Récupérer la classe avec laquelle le professeur doit être associé\n+        $classe = Classe::findOrFail($classeId);\n+    \n+        // Vérifier si le professeur est affecté à cette classe\n+        if (!$classe->professeurs->contains($professeur->id)) {\n+            // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n+            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+        }\n+    \n+        // Si le professeur est affecté, récupérer les notes de cette classe\n+        $notes = Notes::where('classe_id', $classeId)\n+            ->where('professeur_id', $professeur->id)\n+            ->where('is_deleted', false)\n+            ->get();\n+    \n+        // Afficher la vue avec les notes\n+        return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n+    }\n+    \n \n     public function genererBulletin($classeId, $eleveId)\n     {\n         $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n"
                },
                {
                    "date": 1731342957169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,31 +28,31 @@\n     //         ->get();\n         \n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n-    public function index($classeId)\n-    {\n-        // Récupérer le professeur connecté\n-        $professeur = auth()->user()->professeur;\n+    // public function index($classeId)\n+    // {\n+    //     // Récupérer le professeur connecté\n+    //     $professeur = auth()->user()->professeur;\n     \n-        // Récupérer la classe avec laquelle le professeur doit être associé\n-        $classe = Classe::findOrFail($classeId);\n+    //     // Récupérer la classe avec laquelle le professeur doit être associé\n+    //     $classe = Classe::findOrFail($classeId);\n     \n-        // Vérifier si le professeur est affecté à cette classe\n-        if (!$classe->professeurs->contains($professeur->id)) {\n-            // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n-            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n-        }\n+    //     // Vérifier si le professeur est affecté à cette classe\n+    //     if (!$classe->professeurs->contains($professeur->id)) {\n+    //         // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n+    //         return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+    //     }\n     \n-        // Si le professeur est affecté, récupérer les notes de cette classe\n-        $notes = Notes::where('classe_id', $classeId)\n-            ->where('professeur_id', $professeur->id)\n-            ->where('is_deleted', false)\n-            ->get();\n+    //     // Si le professeur est affecté, récupérer les notes de cette classe\n+    //     $notes = Notes::where('classe_id', $classeId)\n+    //         ->where('professeur_id', $professeur->id)\n+    //         ->where('is_deleted', false)\n+    //         ->get();\n     \n-        // Afficher la vue avec les notes\n-        return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n-    }\n+    //     // Afficher la vue avec les notes\n+    //     return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n+    // }\n     \n \n     public function genererBulletin($classeId, $eleveId)\n     {\n"
                },
                {
                    "date": 1731343029126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,41 +19,18 @@\n      * Display a listing of the resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-    // public function index()\n-    // {\n-    //     $professeur = auth()->user()->professeur;\n-    //     $notes = Notes::where('professeur_id', $professeur->id)\n-    //         ->where('is_deleted', false) \n-    //         ->get();\n+    public function index()\n+    {\n+        $professeur = auth()->user()->professeur;\n+        $notes = Notes::where('professeur_id', $professeur->id)\n+            ->where('is_deleted', false) \n+            ->get();\n         \n-    //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n-    // }\n-    // public function index($classeId)\n-    // {\n-    //     // Récupérer le professeur connecté\n-    //     $professeur = auth()->user()->professeur;\n-    \n-    //     // Récupérer la classe avec laquelle le professeur doit être associé\n-    //     $classe = Classe::findOrFail($classeId);\n-    \n-    //     // Vérifier si le professeur est affecté à cette classe\n-    //     if (!$classe->professeurs->contains($professeur->id)) {\n-    //         // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n-    //         return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n-    //     }\n-    \n-    //     // Si le professeur est affecté, récupérer les notes de cette classe\n-    //     $notes = Notes::where('classe_id', $classeId)\n-    //         ->where('professeur_id', $professeur->id)\n-    //         ->where('is_deleted', false)\n-    //         ->get();\n-    \n-    //     // Afficher la vue avec les notes\n-    //     return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n-    // }\n-    \n+        return view('Professeurs.Evaluations.noteslist', compact('notes'));\n+    }\n+   \n \n     public function genererBulletin($classeId, $eleveId)\n     {\n         $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n"
                },
                {
                    "date": 1731343135266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,32 @@\n             ->get();\n         \n         return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     }\n-   \n+    // public function index($classeId)\n+    // {\n+    //     // Récupérer le professeur connecté\n+    //     $professeur = auth()->user()->professeur;\n+    \n+    //     // Récupérer la classe avec laquelle le professeur doit être associé\n+    //     $classe = Classe::findOrFail($classeId);\n+    \n+    //     // Vérifier si le professeur est affecté à cette classe\n+    //     if (!$classe->professeurs->contains($professeur->id)) {\n+    //         // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n+    //         return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+    //     }\n+    \n+    //     // Si le professeur est affecté, récupérer les notes de cette classe\n+    //     $notes = Notes::where('classe_id', $classeId)\n+    //         ->where('professeur_id', $professeur->id)\n+    //         ->where('is_deleted', false)\n+    //         ->get();\n+    \n+    //     // Afficher la vue avec les notes\n+    //     return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n+    // }\n+    \n \n     public function genererBulletin($classeId, $eleveId)\n     {\n         $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n"
                },
                {
                    "date": 1731343152494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n      * Display a listing of the resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n+    \n     public function index()\n     {\n         $professeur = auth()->user()->professeur;\n         $notes = Notes::where('professeur_id', $professeur->id)\n"
                },
                {
                    "date": 1731343566109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,18 +19,18 @@\n      * Display a listing of the resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n-    \n-    public function index()\n-    {\n-        $professeur = auth()->user()->professeur;\n-        $notes = Notes::where('professeur_id', $professeur->id)\n-            ->where('is_deleted', false) \n-            ->get();\n+\n+    // public function index()\n+    // {\n+    //     $professeur = auth()->user()->professeur;\n+    //     $notes = Notes::where('professeur_id', $professeur->id)\n+    //         ->where('is_deleted', false) \n+    //         ->get();\n         \n-        return view('Professeurs.Evaluations.noteslist', compact('notes'));\n-    }\n+    //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n+    // }\n     // public function index($classeId)\n     // {\n     //     // Récupérer le professeur connecté\n     //     $professeur = auth()->user()->professeur;\n"
                },
                {
                    "date": 1731343949441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,32 +29,33 @@\n     //         ->get();\n         \n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n-    // public function index($classeId)\n-    // {\n-    //     // Récupérer le professeur connecté\n-    //     $professeur = auth()->user()->professeur;\n+    public function index($classeId)\n+    {\n+        // Récupérer le professeur connecté\n+        $professeur = auth()->user()->professeur;\n     \n-    //     // Récupérer la classe avec laquelle le professeur doit être associé\n-    //     $classe = Classe::findOrFail($classeId);\n+        // Récupérer la classe avec laquelle le professeur doit être associé\n+        $classe = Classe::findOrFail($classeId);\n     \n-    //     // Vérifier si le professeur est affecté à cette classe\n-    //     if (!$classe->professeurs->contains($professeur->id)) {\n-    //         // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n-    //         return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n-    //     }\n+        // Vérifier si le professeur est affecté à cette classe\n+        if (!$classe->professeurs->contains($professeur->id)) {\n+            // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n+            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+        }\n     \n-    //     // Si le professeur est affecté, récupérer les notes de cette classe\n-    //     $notes = Notes::where('classe_id', $classeId)\n-    //         ->where('professeur_id', $professeur->id)\n-    //         ->where('is_deleted', false)\n-    //         ->get();\n+        // Si le professeur est affecté, récupérer les notes de cette classe\n+        $notes = Notes::where('classe_id', $classeId)\n+            ->where('professeur_id', $professeur->id)\n+            ->where('is_deleted', false)\n+            ->get();\n     \n-    //     // Afficher la vue avec les notes\n-    //     return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n-    // }\n+        // Afficher la vue avec les notes\n+        return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n+    }\n     \n+    \n \n     public function genererBulletin($classeId, $eleveId)\n     {\n         $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n"
                },
                {
                    "date": 1731344366223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,8 @@\n     //     $professeur = auth()->user()->professeur;\n     //     $notes = Notes::where('professeur_id', $professeur->id)\n     //         ->where('is_deleted', false) \n     //         ->get();\n-        \n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n     public function index($classeId)\n     {\n"
                },
                {
                    "date": 1731344496554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,33 +28,33 @@\n     //         ->where('is_deleted', false) \n     //         ->get();\n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n-    public function index($classeId)\n+    public function index()\n     {\n         // Récupérer le professeur connecté\n         $professeur = auth()->user()->professeur;\n+        \n+        // Vérifier s'il est affecté à une classe\n+        $classesAffectees = $professeur->classes; // Obtenez les classes associées au professeur\n     \n-        // Récupérer la classe avec laquelle le professeur doit être associé\n-        $classe = Classe::findOrFail($classeId);\n-    \n-        // Vérifier si le professeur est affecté à cette classe\n-        if (!$classe->professeurs->contains($professeur->id)) {\n-            // Si le professeur n'est pas affecté, rediriger avec un message d'erreur\n-            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+        if ($classesAffectees->isEmpty()) {\n+            // Si le professeur n'est affecté à aucune classe, rediriger avec un message d'erreur\n+            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes affecté à aucune classe.');\n         }\n     \n-        // Si le professeur est affecté, récupérer les notes de cette classe\n-        $notes = Notes::where('classe_id', $classeId)\n+        // Récupérer les notes des classes affectées\n+        $notes = Notes::whereIn('classe_id', $classesAffectees->pluck('id')) // Placer ici l'ID de toutes les classes du professeur\n             ->where('professeur_id', $professeur->id)\n             ->where('is_deleted', false)\n             ->get();\n-    \n-        // Afficher la vue avec les notes\n-        return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n+        \n+        // Afficher la vue avec les notes et les classes affectées\n+        return view('Professeurs.Evaluations.noteslist', compact('notes', 'classesAffectees'));\n     }\n     \n     \n+    \n \n     public function genererBulletin($classeId, $eleveId)\n     {\n         $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n"
                },
                {
                    "date": 1731401900709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n     //         ->where('is_deleted', false) \n     //         ->get();\n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n+    \n     public function index()\n     {\n         // Récupérer le professeur connecté\n         $professeur = auth()->user()->professeur;\n"
                },
                {
                    "date": 1731403485562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     //         ->where('is_deleted', false) \n     //         ->get();\n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n-    \n+    j\n     public function index()\n     {\n         // Récupérer le professeur connecté\n         $professeur = auth()->user()->professeur;\n"
                },
                {
                    "date": 1731406084230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,34 +28,35 @@\n     //         ->where('is_deleted', false) \n     //         ->get();\n     //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n     // }\n-    j\n-    public function index()\n+    \n+    public function index($classeId)\n     {\n         // Récupérer le professeur connecté\n         $professeur = auth()->user()->professeur;\n         \n-        // Vérifier s'il est affecté à une classe\n-        $classesAffectees = $professeur->classes; // Obtenez les classes associées au professeur\n+        // Vérifier si le professeur est affecté à cette classe spécifique\n+        $classe = Classe::findOrFail($classeId);\n     \n-        if ($classesAffectees->isEmpty()) {\n-            // Si le professeur n'est affecté à aucune classe, rediriger avec un message d'erreur\n-            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes affecté à aucune classe.');\n+        if (!$classe->professeurs->contains($professeur->id)) {\n+            // Si le professeur n'est pas affecté à cette classe, rediriger avec un message d'erreur\n+            return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n         }\n     \n-        // Récupérer les notes des classes affectées\n-        $notes = Notes::whereIn('classe_id', $classesAffectees->pluck('id')) // Placer ici l'ID de toutes les classes du professeur\n+        // Récupérer les notes pour cette classe et ce professeur\n+        $notes = Notes::where('classe_id', $classeId)\n             ->where('professeur_id', $professeur->id)\n             ->where('is_deleted', false)\n             ->get();\n         \n-        // Afficher la vue avec les notes et les classes affectées\n-        return view('Professeurs.Evaluations.noteslist', compact('notes', 'classesAffectees'));\n+        // Afficher la vue avec les notes et la classe spécifique\n+        return view('Professeurs.Evaluations.noteslist', compact('notes', 'classe'));\n     }\n     \n     \n     \n+    \n \n     public function genererBulletin($classeId, $eleveId)\n     {\n         $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n"
                }
            ],
            "date": 1731341813518,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\nuse Dompdf\\Dompdf;\nuse Dompdf\\Options;\nuse App\\Models\\User;\nuse App\\Models\\Notes;\nuse App\\Models\\Classe;\nuse App\\Models\\Eleves;\nuse App\\Mail\\BulletinMail;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Mail;\nuse App\\Notifications\\BulletinDisponible;\n\nclass NotesController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    // public function index()\n    // {\n    //     $professeur = auth()->user()->professeur;\n    //     $notes = Notes::where('professeur_id', $professeur->id)\n    //         ->where('is_deleted', false) \n    //         ->get();\n        \n    //     return view('Professeurs.Evaluations.noteslist', compact('notes'));\n    // }\n    \n    public function genererBulletin($classeId, $eleveId)\n    {\n        $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n        $classe = Classe::findOrFail($classeId);\n    \n        $totalNotes = 0;\n        $totalCoefficients = 0;\n    \n        foreach ($eleve->notes as $note) {\n            $totalNotes += $note->valeur * $note->coefficient;\n            $totalCoefficients += $note->coefficient;\n        }\n    \n        if ($totalCoefficients > 0) {\n            $moyenne = $totalNotes / $totalCoefficients;\n        } else {\n            $moyenne = 0;\n        }\n    \n        $options = new Options();\n        $options->set('defaultFont', 'Helvetica');\n    \n        $dompdf = new Dompdf($options);\n        $dompdf->loadHtml(view('Administrateur.classe.bulletin', compact('eleve', 'classe', 'moyenne'))->render());\n        $dompdf->setPaper('A4', 'portrait');\n        $dompdf->render();\n    \n\n      \n   \n   if (!empty($eleve->user->email) && filter_var($eleve->user->email, FILTER_VALIDATE_EMAIL)) {\n     Mail::to($eleve->user->email)->send(new BulletinMail($eleve, $classe));\n   }\n\n\n   if (!empty($eleve->email_tuteur) && filter_var($eleve->email_tuteur, FILTER_VALIDATE_EMAIL)) {\n     Mail::to($eleve->email_tuteur)->send(new BulletinMail($eleve, $classe));\n   }\n            return $dompdf->stream('bulletin_' . $eleve->id . '.pdf');\n        }\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        // \n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Notes  $notes\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function showClassNotes($classeId)\n    {\n        $classe = Classe::with(['eleve.notes.evaluation'])->findOrFail($classeId);\n        return view('Administrateur.classe.notes', compact('classe'));\n    }\n    \n   \n    public function showBulletin($classeId, $eleveId)\n    {\n        $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n        $classe = Classe::with('etablissement')->findOrFail($classeId);\n    \n        $totalNotes = 0;\n        $totalCoefficients = 0;\n    \n        foreach ($eleve->notes as $note) {\n            $totalNotes += $note->valeur * $note->coefficient;\n            $totalCoefficients += $note->coefficient;\n        }\n    \n        if ($totalCoefficients > 0) {\n            $moyenne = $totalNotes / $totalCoefficients;\n        } else {\n            $moyenne = 0;\n        }\n    \n        $etablissement = $classe->etablissement;\n    \n        return view('Administrateur.Classe.BulletinShow', compact('eleve', 'classe', 'etablissement', 'moyenne'));\n    }\n\n\n\n\n\npublic function calculerMoyenne($eleveId)\n{\n    $eleve = Eleves::with('notes.evaluation')->findOrFail($eleveId);\n    \n    $totalNotes = 0;\n    $totalCoefficients = 0;\n    $notesParEvaluation = [];\n    $coefficientsParEvaluation = [];\n\n    foreach ($eleve->notes as $note) {\n        $evaluationId = $note->evaluation_id;\n        $valeur = $note->valeur;\n        $coefficient = $note->coefficient;\n\n        if (!isset($notesParEvaluation[$evaluationId])) {\n            $notesParEvaluation[$evaluationId] = [];\n            $coefficientsParEvaluation[$evaluationId] = $coefficient;\n        }\n\n        $notesParEvaluation[$evaluationId][] = $valeur;\n    }\n\n    foreach ($notesParEvaluation as $evaluationId => $notes) {\n        $coef = $coefficientsParEvaluation[$evaluationId];\n        $averageNote = array_sum($notes) / count($notes);\n\n        $totalNotes += $averageNote * $coef;\n        $totalCoefficients += $coef;\n    }\n\n    if ($totalCoefficients > 0) {\n        $moyenne = $totalNotes / $totalCoefficients;\n        $moyenne = round($moyenne, 2);\n    } else {\n        $moyenne = 0;\n    }\n\n    return back()->with('success', 'La moyenne de l\\'élève est: ' . $moyenne);\n}\n\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\Notes  $notes\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Notes $note)\n    {\n        return view('Professeurs.Evaluations.notesedit', compact('note'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Notes  $notes\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Notes $note)\n    {\n        if ($note->professeur_id !== Auth::user()->professeur->id) {\n            return redirect()->route('notes.edit', $note)->with('error', 'Vous n\\'avez pas la permission de modifier cette note.');\n        }\n    \n        $request->validate([\n            'valeur' => 'required|numeric|min:0|max:20',\n            'appreciations' => 'nullable|string|max:255',\n        ]);\n    \n        $note->update([\n            'valeur' => $request->input('valeur'),\n            'appreciations' => $request->input('appreciations'),\n        ]);\n    \n        return redirect()->route('professeurs.notes.list', $note)->with('success', 'Note mise à jour avec succès.');\n    }\n    \n    \n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Notes  $notes\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Notes $notes)\n    {\n        $notes->update(['is_deleted' => true]);\n    \n        return redirect()->route('professeurs.notes.list')->with('success', 'Note supprimée avec succès.');\n    }\n    \n\n}\n\n"
        }
    ]
}