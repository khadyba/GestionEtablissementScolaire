{
    "sourceFile": "app/Http/Controllers/PaymentController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1728979066760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728979082103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,35 +87,35 @@\n     public function success()\n     {\n         return view('payment.success');\n     }\n-public function cancel()\n-{\n-    $classes = Classe::all();\n-    return view('Eleves.elevesdashboard', compact('classes'));\n-}\n-public function callback(Request $request)\n-{\n-     if ($request->isMethod('post')) {\n-        $data = $request->all();\n+    public function cancel()\n+    {\n+        $classes = Classe::all();\n+        return view('Eleves.elevesdashboard', compact('classes'));\n+    }\n+    public function callback(Request $request)\n+    {\n+        if ($request->isMethod('post')) {\n+            $data = $request->all();\n \n-        if ($data['status'] == 'completed') {\n-            $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n-            Payment::create([\n-                'montant' => $data['total_amount'],\n-                'date' => now(),\n-                'status' => $data['status'],\n-                'eleves_id' => $eleve->id\n-            ]);\n+            if ($data['status'] == 'completed') {\n+                $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n+                Payment::create([\n+                    'montant' => $data['total_amount'],\n+                    'date' => now(),\n+                    'status' => $data['status'],\n+                    'eleves_id' => $eleve->id\n+                ]);\n \n-            return response()->json(['status' => 'success'], 200);\n+                return response()->json(['status' => 'success'], 200);\n+            } else {\n+                return response()->json(['status' => 'failure', 'message' => 'Payment not completed'], 400);\n+            }\n         } else {\n-            return response()->json(['status' => 'failure', 'message' => 'Payment not completed'], 400);\n+            return response()->json(['error' => 'Method not allowed'], 405);\n         }\n-    } else {\n-        return response()->json(['error' => 'Method not allowed'], 405);\n     }\n-}\n     /**\n      * Show the form for creating a new resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n"
                },
                {
                    "date": 1728979156449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,8 @@\n         PaydunyaStore::setPhoneNumber(\"773611172\");\n         PaydunyaStore::setPostalAddress(\"Dakar, Sénégal\");\n         PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n     \n-       \n         \n     }\n     public function redirectToPayment()\n     {\n"
                },
                {
                    "date": 1728979209773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n use App\\Models\\Payment;\n use Illuminate\\Http\\Request;\n \n use App\\Mail\\PaymentReceived;\n-\n use Illuminate\\Support\\Facades\\Mail;\n use Paydunya\\Setup as PaydunyaSetup;\n use Paydunya\\Checkout\\CheckoutInvoice;\n use Paydunya\\Checkout\\Store as PaydunyaStore;\n@@ -42,10 +41,8 @@\n         PaydunyaStore::setTagline(\"Payer n'importe ou n'importe comment!\");\n         PaydunyaStore::setPhoneNumber(\"773611172\");\n         PaydunyaStore::setPostalAddress(\"Dakar, Sénégal\");\n         PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n-    \n-        \n     }\n     public function redirectToPayment()\n     {\n         $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n"
                },
                {
                    "date": 1728979216086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,11 @@\n <?php\n \n namespace App\\Http\\Controllers;\n-\n use App\\Models\\Classe;\n use App\\Models\\Eleves;\n use App\\Models\\Payment;\n use Illuminate\\Http\\Request;\n-\n use App\\Mail\\PaymentReceived;\n use Illuminate\\Support\\Facades\\Mail;\n use Paydunya\\Setup as PaydunyaSetup;\n use Paydunya\\Checkout\\CheckoutInvoice;\n"
                },
                {
                    "date": 1732374182168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,43 +42,43 @@\n         PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n     }\n     public function redirectToPayment()\n     {\n-        $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n-    \n-    // Récupérer l'établissement associé à l'élève\n-    $etablissement = $eleve->user->etablissement; \n+            $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n+        \n+        // Récupérer l'établissement associé à l'élève\n+        $etablissement = $eleve->user->etablissement; \n \n-    $co = new CheckoutInvoice();\n-    \n-    // Ajouter les détails de l'article à l'invoice\n-    $co->addItem(\n-        \"Frais de scolarité pour \" . $eleve->prenoms . \" \" . $eleve->nom,\n-        \"Frais de scolarité pour l'établissement \" . $etablissement->nom,\n-        1,\n-        30000, \n-        30000 \n-    );\n+        $co = new CheckoutInvoice();\n+        \n+        // Ajouter les détails de l'article à l'invoice\n+        $co->addItem(\n+            \"Frais de scolarité pour \" . $eleve->prenoms . \" \" . $eleve->nom,\n+            \"Frais de scolarité pour l'établissement \" . $etablissement->nom,\n+            1,\n+            30000, \n+            30000 \n+        );\n \n-    $co->setTotalAmount(30000); \n+        $co->setTotalAmount(30000); \n \n-    // Créer la facture via PayDunya\n-    if ($co->create()) {\n-        Payment::create([\n-            'montant' => 30000, \n-            'statut' => 1, \n-            'date' => now(),\n-            'eleve_id' => $eleve->id\n-        ]);\n+        // Créer la facture via PayDunya\n+        if ($co->create()) {\n+            Payment::create([\n+                'montant' => 30000, \n+                'statut' => 1, \n+                'date' => now(),\n+                'eleve_id' => $eleve->id\n+            ]);\n \n-        if (!empty($eleve->email_tuteur)) {\n-            Mail::to($eleve->email_tuteur)->send(new \\App\\Mail\\PaymentReceived($eleve, 30000, $etablissement));\n+            if (!empty($eleve->email_tuteur)) {\n+                Mail::to($eleve->email_tuteur)->send(new \\App\\Mail\\PaymentReceived($eleve, 30000, $etablissement));\n+            }\n+            return redirect($co->getInvoiceUrl());\n+        } else {\n+            return response()->json(['error' => $co->response_text], 500);\n         }\n-        return redirect($co->getInvoiceUrl());\n-    } else {\n-        return response()->json(['error' => $co->response_text], 500);\n     }\n-    }\n     public function success()\n     {\n         return view('payment.success');\n     }\n"
                },
                {
                    "date": 1732374188217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n         PaydunyaStore::setPhoneNumber(\"773611172\");\n         PaydunyaStore::setPostalAddress(\"Dakar, Sénégal\");\n         PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n     }\n+    \n     public function redirectToPayment()\n     {\n             $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n         \n"
                },
                {
                    "date": 1732461124789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,46 +40,47 @@\n         PaydunyaStore::setPhoneNumber(\"773611172\");\n         PaydunyaStore::setPostalAddress(\"Dakar, Sénégal\");\n         PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n     }\n-    \n-    public function redirectToPayment()\n-    {\n-            $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n+\n+    // public function redirectToPayment()\n+    // {\n+    //         $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n         \n-        // Récupérer l'établissement associé à l'élève\n-        $etablissement = $eleve->user->etablissement; \n+    //     // Récupérer l'établissement associé à l'élève\n+    //     $etablissement = $eleve->user->etablissement; \n \n-        $co = new CheckoutInvoice();\n+    //     $co = new CheckoutInvoice();\n         \n-        // Ajouter les détails de l'article à l'invoice\n-        $co->addItem(\n-            \"Frais de scolarité pour \" . $eleve->prenoms . \" \" . $eleve->nom,\n-            \"Frais de scolarité pour l'établissement \" . $etablissement->nom,\n-            1,\n-            30000, \n-            30000 \n-        );\n+    //     // Ajouter les détails de l'article à l'invoice\n+    //     $co->addItem(\n+    //         \"Frais de scolarité pour \" . $eleve->prenoms . \" \" . $eleve->nom,\n+    //         \"Frais de scolarité pour l'établissement \" . $etablissement->nom,\n+    //         1,\n+    //         30000, \n+    //         30000 \n+    //     );\n \n-        $co->setTotalAmount(30000); \n+    //     $co->setTotalAmount(30000); \n \n-        // Créer la facture via PayDunya\n-        if ($co->create()) {\n-            Payment::create([\n-                'montant' => 30000, \n-                'statut' => 1, \n-                'date' => now(),\n-                'eleve_id' => $eleve->id\n-            ]);\n+    //     // Créer la facture via PayDunya\n+    //     if ($co->create()) {\n+    //         Payment::create([\n+    //             'montant' => 30000, \n+    //             'statut' => 1, \n+    //             'date' => now(),\n+    //             'eleve_id' => $eleve->id\n+    //         ]);\n \n-            if (!empty($eleve->email_tuteur)) {\n-                Mail::to($eleve->email_tuteur)->send(new \\App\\Mail\\PaymentReceived($eleve, 30000, $etablissement));\n-            }\n-            return redirect($co->getInvoiceUrl());\n-        } else {\n-            return response()->json(['error' => $co->response_text], 500);\n-        }\n-    }\n+    //         if (!empty($eleve->email_tuteur)) {\n+    //             Mail::to($eleve->email_tuteur)->send(new \\App\\Mail\\PaymentReceived($eleve, 30000, $etablissement));\n+    //         }\n+    //         return redirect($co->getInvoiceUrl());\n+    //     } else {\n+    //         return response()->json(['error' => $co->response_text], 500);\n+    //     }\n+    // }\n+    \n     public function success()\n     {\n         return view('payment.success');\n     }\n"
                },
                {
                    "date": 1732461131630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,83 @@\n     //         return response()->json(['error' => $co->response_text], 500);\n     //     }\n     // }\n     \n+\n+\n+\n+    public function redirectToPayment()\n+    {\n+        // Récupérer l'élève authentifié\n+        $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n+        \n+        // Récupérer l'établissement associé à l'élève\n+        $etablissement = $eleve->user->etablissement;\n+    \n+        // Vérification si l'établissement est public\n+        if ($etablissement->type == 'public') {\n+            // Vérifier si l'élève a déjà payé son inscription\n+            $payment = Payment::where('eleve_id', $eleve->id)\n+                              ->where('statut', 1) // Statut 1 signifie payé\n+                              ->first();\n+    \n+            if ($payment) {\n+                // Si l'élève a déjà payé\n+                return redirect()->route('eleves.dashboard')->with('message', 'Inscription déjà payée.');\n+            } else {\n+                // Si l'élève n'a pas payé, on redirige pour le paiement\n+                return $this->processPayment($eleve, $etablissement);\n+            }\n+        }\n+    \n+        // Si l'établissement est privé, on laisse l'élève passer à l'étape de paiement\n+        return $this->processPayment($eleve, $etablissement);\n+    }\n+    \n+    private function processPayment($eleve, $etablissement)\n+    {\n+        // Création de la facture\n+        $co = new CheckoutInvoice();\n+        \n+        // Ajouter les détails de l'article à l'invoice\n+        $co->addItem(\n+            \"Frais de scolarité pour \" . $eleve->prenoms . \" \" . $eleve->nom,\n+            \"Frais de scolarité pour l'établissement \" . $etablissement->nom,\n+            1,\n+            30000, // Montant par défaut\n+            30000  // Montant total\n+        );\n+    \n+        $co->setTotalAmount(30000);\n+    \n+        // Créer la facture via PayDunya\n+        if ($co->create()) {\n+            // Enregistrement du paiement\n+            Payment::create([\n+                'montant' => 30000, \n+                'statut' => 1,  // Paiement réussi\n+                'date' => now(),\n+                'eleve_id' => $eleve->id\n+            ]);\n+    \n+            // Envoi de l'email de confirmation au tuteur\n+            if (!empty($eleve->email_tuteur)) {\n+                Mail::to($eleve->email_tuteur)->send(new \\App\\Mail\\PaymentReceived($eleve, 30000, $etablissement));\n+            }\n+    \n+            // Redirection vers PayDunya pour effectuer le paiement\n+            return redirect($co->getInvoiceUrl());\n+        } else {\n+            // Si la facture n'a pas pu être créée, retourne une erreur\n+            return response()->json(['error' => $co->response_text], 500);\n+        }\n+    }\n+    \n+\n+\n+\n+\n+\n     public function success()\n     {\n         return view('payment.success');\n     }\n"
                },
                {
                    "date": 1732463027765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,9 @@\n         return $this->processPayment($eleve, $etablissement);\n     }\n     \n     private function processPayment($eleve, $etablissement)\n+    \n     {\n         // Création de la facture\n         $co = new CheckoutInvoice();\n         \n"
                },
                {
                    "date": 1732463408386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                               ->first();\n     \n             if ($payment) {\n                 // Si l'élève a déjà payé\n-                return redirect()->route('eleves.dashboard')->with('message', 'Inscription déjà payée.');\n+                return redirect()->route('eleves.dashboard')->with('succes', 'Inscription déjà payée.');\n             } else {\n                 // Si l'élève n'a pas payé, on redirige pour le paiement\n                 return $this->processPayment($eleve, $etablissement);\n             }\n@@ -111,9 +111,9 @@\n         return $this->processPayment($eleve, $etablissement);\n     }\n     \n     private function processPayment($eleve, $etablissement)\n-    \n+\n     {\n         // Création de la facture\n         $co = new CheckoutInvoice();\n         \n"
                },
                {
                    "date": 1732463502004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                               ->first();\n     \n             if ($payment) {\n                 // Si l'élève a déjà payé\n-                return redirect()->route('eleves.dashboard')->with('succes', 'Inscription déjà payée.');\n+                return redirect()->route('eleves.dashboard')->with('success', 'Inscription déjà payée.');\n             } else {\n                 // Si l'élève n'a pas payé, on redirige pour le paiement\n                 return $this->processPayment($eleve, $etablissement);\n             }\n"
                },
                {
                    "date": 1732469371817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                               ->first();\n     \n             if ($payment) {\n                 // Si l'élève a déjà payé\n-                return redirect()->route('eleves.dashboard')->with('success', 'Inscription déjà payée.');\n+                return 'eleves.dashboard')->with('success', 'Inscription déjà payée.');\n             } else {\n                 // Si l'élève n'a pas payé, on redirige pour le paiement\n                 return $this->processPayment($eleve, $etablissement);\n             }\n"
                },
                {
                    "date": 1732469393089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                               ->first();\n     \n             if ($payment) {\n                 // Si l'élève a déjà payé\n-                return 'eleves.dashboard')->with('success', 'Inscription déjà payée.');\n+                return back->with('success', 'Inscription déjà payée.');\n             } else {\n                 // Si l'élève n'a pas payé, on redirige pour le paiement\n                 return $this->processPayment($eleve, $etablissement);\n             }\n"
                },
                {
                    "date": 1732469400993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                               ->first();\n     \n             if ($payment) {\n                 // Si l'élève a déjà payé\n-                return back->with('success', 'Inscription déjà payée.');\n+                return back()->with('success', 'Inscription déjà payée.');\n             } else {\n                 // Si l'élève n'a pas payé, on redirige pour le paiement\n                 return $this->processPayment($eleve, $etablissement);\n             }\n"
                },
                {
                    "date": 1732469454772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         // Vérification si l'établissement est public\n         if ($etablissement->type == 'public') {\n             // Vérifier si l'élève a déjà payé son inscription\n             $payment = Payment::where('eleve_id', $eleve->id)\n-                              ->where('statut', 1) // Statut 1 signifie payé\n+                              ->where('statut', 1) \n                               ->first();\n     \n             if ($payment) {\n                 // Si l'élève a déjà payé\n"
                },
                {
                    "date": 1732469653358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,45 +41,9 @@\n         PaydunyaStore::setPostalAddress(\"Dakar, Sénégal\");\n         PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n     }\n \n-    // public function redirectToPayment()\n-    // {\n-    //         $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n-        \n-    //     // Récupérer l'établissement associé à l'élève\n-    //     $etablissement = $eleve->user->etablissement; \n-\n-    //     $co = new CheckoutInvoice();\n-        \n-    //     // Ajouter les détails de l'article à l'invoice\n-    //     $co->addItem(\n-    //         \"Frais de scolarité pour \" . $eleve->prenoms . \" \" . $eleve->nom,\n-    //         \"Frais de scolarité pour l'établissement \" . $etablissement->nom,\n-    //         1,\n-    //         30000, \n-    //         30000 \n-    //     );\n-\n-    //     $co->setTotalAmount(30000); \n-\n-    //     // Créer la facture via PayDunya\n-    //     if ($co->create()) {\n-    //         Payment::create([\n-    //             'montant' => 30000, \n-    //             'statut' => 1, \n-    //             'date' => now(),\n-    //             'eleve_id' => $eleve->id\n-    //         ]);\n-\n-    //         if (!empty($eleve->email_tuteur)) {\n-    //             Mail::to($eleve->email_tuteur)->send(new \\App\\Mail\\PaymentReceived($eleve, 30000, $etablissement));\n-    //         }\n-    //         return redirect($co->getInvoiceUrl());\n-    //     } else {\n-    //         return response()->json(['error' => $co->response_text], 500);\n-    //     }\n-    // }\n+   \n     \n \n \n \n"
                },
                {
                    "date": 1732469664215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,8 @@\n         PaydunyaStore::setPostalAddress(\"Dakar, Sénégal\");\n         PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n     }\n \n-   \n-    \n-\n-\n-\n     public function redirectToPayment()\n     {\n         // Récupérer l'élève authentifié\n         $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n@@ -113,14 +108,8 @@\n             // Si la facture n'a pas pu être créée, retourne une erreur\n             return response()->json(['error' => $co->response_text], 500);\n         }\n     }\n-    \n-\n-\n-\n-\n-\n     public function success()\n     {\n         return view('payment.success');\n     }\n"
                },
                {
                    "date": 1732469780371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,15 +56,16 @@\n             $payment = Payment::where('eleve_id', $eleve->id)\n                               ->where('statut', 1) \n                               ->first();\n     \n-            if ($payment) {\n-                // Si l'élève a déjà payé\n-                return back()->with('success', 'Inscription déjà payée.');\n-            } else {\n-                // Si l'élève n'a pas payé, on redirige pour le paiement\n-                return $this->processPayment($eleve, $etablissement);\n-            }\n+                              if ($payment) {\n+                                // Si l'élève a déjà payé\n+                                return back()->with('success', 'Inscription déjà payée.');\n+                            } else {\n+                                // Si l'élève n'a pas payé, on redirige pour le paiement\n+                                return $this->processPayment($eleve, $etablissement);\n+                            }\n+                            \n         }\n     \n         // Si l'établissement est privé, on laisse l'élève passer à l'étape de paiement\n         return $this->processPayment($eleve, $etablissement);\n"
                },
                {
                    "date": 1732469786087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             $payment = Payment::where('eleve_id', $eleve->id)\n                               ->where('statut', 1) \n                               ->first();\n     \n-                              if ($payment) {\n+             if ($payment) {\n                                 // Si l'élève a déjà payé\n                                 return back()->with('success', 'Inscription déjà payée.');\n                             } else {\n                                 // Si l'élève n'a pas payé, on redirige pour le paiement\n"
                },
                {
                    "date": 1732469793256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,13 +58,13 @@\n                               ->first();\n     \n              if ($payment) {\n                                 // Si l'élève a déjà payé\n-                                return back()->with('success', 'Inscription déjà payée.');\n-                            } else {\n+                         return back()->with('success', 'Inscription déjà payée.');\n+              } else {\n                                 // Si l'élève n'a pas payé, on redirige pour le paiement\n                                 return $this->processPayment($eleve, $etablissement);\n-                            }\n+                     }\n                             \n         }\n     \n         // Si l'établissement est privé, on laisse l'élève passer à l'étape de paiement\n"
                }
            ],
            "date": 1728979066760,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Classe;\nuse App\\Models\\Eleves;\nuse App\\Models\\Payment;\nuse Illuminate\\Http\\Request;\n\nuse App\\Mail\\PaymentReceived;\n\nuse Illuminate\\Support\\Facades\\Mail;\nuse Paydunya\\Setup as PaydunyaSetup;\nuse Paydunya\\Checkout\\CheckoutInvoice;\nuse Paydunya\\Checkout\\Store as PaydunyaStore;\n\nclass PaymentController extends Controller\n{\n\n    protected $payDunyaService;\n\n   \n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        //\n    }\n    public function __construct()\n    {\n        PaydunyaSetup::setMasterKey(config('paydunya.master_key'));\n        PaydunyaSetup::setPublicKey(config('paydunya.public_key'));\n        PaydunyaSetup::setPrivateKey(config('paydunya.private_key'));\n        PaydunyaSetup::setMode(config('paydunya.mode'));\n        PaydunyaSetup::setToken(config('paydunya.token'));\n\n        // Configurer les informations de la boutique\n        PaydunyaStore::setName(\"SunuLycee\"); // Seul le nom est requis\n        PaydunyaStore::setTagline(\"Payer n'importe ou n'importe comment!\");\n        PaydunyaStore::setPhoneNumber(\"773611172\");\n        PaydunyaStore::setPostalAddress(\"Dakar, Sénégal\");\n        PaydunyaStore::setWebsiteUrl(\"http://127.0.0.1:8000\");\n    \n       \n        \n    }\n    public function redirectToPayment()\n    {\n        $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n    \n    // Récupérer l'établissement associé à l'élève\n    $etablissement = $eleve->user->etablissement; \n\n    $co = new CheckoutInvoice();\n    \n    // Ajouter les détails de l'article à l'invoice\n    $co->addItem(\n        \"Frais de scolarité pour \" . $eleve->prenoms . \" \" . $eleve->nom,\n        \"Frais de scolarité pour l'établissement \" . $etablissement->nom,\n        1,\n        30000, \n        30000 \n    );\n\n    $co->setTotalAmount(30000); \n\n    // Créer la facture via PayDunya\n    if ($co->create()) {\n        Payment::create([\n            'montant' => 30000, \n            'statut' => 1, \n            'date' => now(),\n            'eleve_id' => $eleve->id\n        ]);\n\n        if (!empty($eleve->email_tuteur)) {\n            Mail::to($eleve->email_tuteur)->send(new \\App\\Mail\\PaymentReceived($eleve, 30000, $etablissement));\n        }\n        return redirect($co->getInvoiceUrl());\n    } else {\n        return response()->json(['error' => $co->response_text], 500);\n    }\n    }\n    public function success()\n    {\n        return view('payment.success');\n    }\npublic function cancel()\n{\n    $classes = Classe::all();\n    return view('Eleves.elevesdashboard', compact('classes'));\n}\npublic function callback(Request $request)\n{\n     if ($request->isMethod('post')) {\n        $data = $request->all();\n\n        if ($data['status'] == 'completed') {\n            $eleve = Eleves::where('user_id', auth()->id())->firstOrFail();\n            Payment::create([\n                'montant' => $data['total_amount'],\n                'date' => now(),\n                'status' => $data['status'],\n                'eleves_id' => $eleve->id\n            ]);\n\n            return response()->json(['status' => 'success'], 200);\n        } else {\n            return response()->json(['status' => 'failure', 'message' => 'Payment not completed'], 400);\n        }\n    } else {\n        return response()->json(['error' => 'Method not allowed'], 405);\n    }\n}\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Payment  $payment\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Payment $payment)\n    {\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\Payment  $payment\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Payment $payment)\n    {\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Payment  $payment\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Payment $payment)\n    {\n        //\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Payment  $payment\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Payment $payment)\n    {\n        //\n    }\n}\n"
        }
    ]
}