{
    "sourceFile": "app/Http/Controllers/ProfesseurController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1727024262865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727024359071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             $professeur->adresse = $validatedData['adresse'];\n             $professeur->telephone = $validatedData['telephone'];\n             $professeur->is_completed = true; \n             $professeur->save();\n-            return redirect()->route('prof.dashboard')->with('success', 'Profil complété avec succès.');\n+            return redirect()->route('professeurs.dashboard')->with('success', 'Profil complété avec succès.');\n         }\n \n         return redirect()->route('home')->with('error', 'Vous n\\'avez pas les droits nécessaires pour compléter ce profil.');\n     }\n"
                }
            ],
            "date": 1727024262865,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Cours;\nuse App\\Models\\Classe;\nuse App\\Models\\Eleves;\nuse App\\Models\\Professeur;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\SalleDeClasse;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Storage;\nuse App\\Http\\Requests\\CompleterProfilProfRequest;\nuse App\\Http\\Requests\\UpdateProfessorProfileRequest;\n\nclass ProfesseurController extends Controller\n{\n    public function __construct()\n    {\n        $this->middleware(['auth', 'professor']);\n        $this->authorizeResource(Cours::class, 'cours');\n    }\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n\n        $classes = Classe::where('is_delete', false)->get();\n        return view('Professeurs.profdashboard', compact('classes'));\n        \n    }\n    public function showCompleteProfileForm()\n    {\n        return view('Professeurs.complete-profile');\n    }\n    public function completeProfile(CompleterProfilProfRequest $request)\n    {\n        $validatedData = $request->validated();\n        $user = Auth::user();\n        $role = DB::table('usersroles')\n            ->where('user_id', $user->id)\n            ->first();\n        if ($role && $role->role_id == 1) {\n            $professeur = Professeur::where('user_id', $user->id)->first();\n            if (!$professeur) {\n                $professeur = new Professeur();\n                $professeur->user_id = $user->id;\n            }\n            $professeur->nom = $validatedData['nom'];\n            $professeur->prenoms = $validatedData['prenoms'];\n            $professeur->spécialiter = $validatedData['spécialiter'];\n            $professeur->adresse = $validatedData['adresse'];\n            $professeur->telephone = $validatedData['telephone'];\n            $professeur->is_completed = true; \n            $professeur->save();\n            return redirect()->route('prof.dashboard')->with('success', 'Profil complété avec succès.');\n        }\n\n        return redirect()->route('home')->with('error', 'Vous n\\'avez pas les droits nécessaires pour compléter ce profil.');\n    }\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n\n    public function create($id)\n    {\n        $this->authorize('create', Cours::class);\n        $classe = Classe::find($id);\n        if (!$classe) {\n            return redirect()->route('route.vers.une.page.d.erreur')->withErrors(['error' => 'Classe non trouvée']);\n        }\n        $professeur = auth()->user()->professeur;\n        // dd(  $professeur->role_id );\n        $sallesDeClasses = SalleDeClasse::all(); \n\n        return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n    }\n\n    \n    \n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        $validatedData = $request->validate([\n            'titre' => 'required|string|max:255',\n            'descriptions' => 'required|string',\n            'jours' => 'required|date',\n            'heure_debut' => 'required|date_format:H:i',\n            'heure_fin' => 'required|date_format:H:i',\n            'fichier_cours' => 'required|file|mimes:pdf,doc,docx,ppt,pptx',\n            'classe_id' => 'required|exists:classes,id',\n        ]);\n        try {\n            $professeur = auth()->user()->professeur;\n            $classeId = $validatedData['classe_id'];\n            $classe = Classe::findOrFail($classeId);\n    \n         \n            if (!$professeur->classes->contains($classe)) {\n                return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n            }\n    \n            $filePath = $request->file('fichier_cours')->store('public/cours_fichiers');\n            $cours = new Cours();\n            $cours->titre = $validatedData['titre'];\n            $cours->descriptions = $validatedData['descriptions'];\n            $cours->jours = $validatedData['jours'];\n            $cours->heure_debut = $validatedData['heure_debut'];\n            $cours->heure_fin = $validatedData['heure_fin'];\n            $cours->fichier_cours = $filePath;\n            $cours->professeur_id = $professeur->id;\n            $cours->classe_id = $validatedData['classe_id'];\n            $cours->save();\n    \n            return redirect()->route('professeurs.cours.list.prof', $validatedData['classe_id'])\n                             ->with('success', 'Cours créé avec succès.');\n        } catch (\\Exception $e) {\n            return back()->withErrors(['error' => 'Une erreur est survenue lors de la création du cours.']);\n        }\n    }\n    \n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n        $this->authorize('view', $classe);\n        dd('ooh');\n        $eleve= Eleves::whereNull('classe_id')->get();\n        $professeursAssignes = $classe->professeurs;\n        return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id)\n    {\n        $cours = Cours::find($id);\n\n    if (!$cours) {\n        return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n    }\n    return view('Professeurs.Cours.editCours', compact('cours'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        $this->authorize('updade', Cours::class);\n\n        $cours = Cours::find($id);\n    \n        if (!$cours) {\n            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n        }\n        $validatedData = $request->validate([\n            'titre' => 'required|string|max:255',\n            'descriptions' => 'required|string',\n            'jours' => 'required|date',\n            'heure_debut' => 'required|date_format:H:i',\n            'heure_fin' => 'required|date_format:H:i',\n            'fichier_cours' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx',\n        ]);\n        \n    \n        if ($request->hasFile('fichier_cours')) {\n            $filePath = $request->file('fichier_cours')->store('cours_fichiers', 'public');\n            $cours->fichier_cours = $filePath;\n        }\n    \n        $cours->titre = $validatedData['titre'];\n        $cours->descriptions = $validatedData['descriptions'];\n        $cours->jours = $validatedData['jours'];\n        $cours->heure_debut = $validatedData['heure_debut'];\n        $cours->heure_fin = $validatedData['heure_fin'];\n        $cours->save();\n    \n        return redirect()->route('professeurs.cours.list.prof')->with('success', 'Cours mis à jour avec succès.');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        $this->authorize('create', Cours::class);\n\n        $cours = Cours::find($id);\n\n        if (!$cours) {\n            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n        }\n\n        $cours->is_deleted = true;\n        $cours->save();\n\n    return back();\n    }\n\n    public function listeCours($id)\n    {\n        $professeur = auth()->user()->professeur;\n        $classe = Classe::findOrFail($id);\n        // dd($professeur, $classe, $classeId);\n        if (!$professeur->classes->contains($classe)) {\n            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à voir les cours de cette classe.']);\n        }\n        $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n        return view('Professeurs.Cours.listCours', compact('classe', 'cours'));\n    }\n    \n    \n    \n    public function detailCours($id)\n    {\n        $cours = Cours::findOrFail($id);\n        $classe= $cours->classe->id;\n    if (!$cours) {\n        return redirect()->route('cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n    }\n        return  view('Professeurs.Cours.coursDetail',compact('cours','classe'));\n    }\n    \n    public function editProfile()\n    {\n        $professeur = Auth::user()->professeur;\n        return view('Professeurs.profileEdit', compact('professeur'));\n    }\n\n    public function updateProfile(UpdateProfessorProfileRequest $request)\n    {\n        $user = Auth::user();\n        $professeur = $user->professeur;\n        $data = $request->validated();\n    //     $data = $request->validate([\n    //     'nom' => 'required|string|max:255',\n    //     'prenoms'  =>  'required|string|max:255',\n    //     'adresse'  =>  'required|string|max:255',\n    //     'spécialiter'  =>  'required|string|max:255',\n    //     'telephone'  =>  'required|string|max:255',\n      \n    // ]);\n\n    $professeur->update($data);\n    return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n    }\n}\n"
        }
    ]
}