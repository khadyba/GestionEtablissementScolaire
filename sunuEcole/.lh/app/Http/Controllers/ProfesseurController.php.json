{
    "sourceFile": "app/Http/Controllers/ProfesseurController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 72,
            "patches": [
                {
                    "date": 1727024262865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727024359071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             $professeur->adresse = $validatedData['adresse'];\n             $professeur->telephone = $validatedData['telephone'];\n             $professeur->is_completed = true; \n             $professeur->save();\n-            return redirect()->route('prof.dashboard')->with('success', 'Profil complété avec succès.');\n+            return redirect()->route('professeurs.dashboard')->with('success', 'Profil complété avec succès.');\n         }\n \n         return redirect()->route('home')->with('error', 'Vous n\\'avez pas les droits nécessaires pour compléter ce profil.');\n     }\n"
                },
                {
                    "date": 1731318901104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,276 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use App\\Models\\Cours;\n+use App\\Models\\Classe;\n+use App\\Models\\Eleves;\n+use App\\Models\\Professeur;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\SalleDeClasse;\n+use Illuminate\\Support\\Facades\\DB;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\Storage;\n+use App\\Http\\Requests\\CompleterProfilProfRequest;\n+use App\\Http\\Requests\\UpdateProfessorProfileRequest;\n+\n+class ProfesseurController extends Controller\n+{\n+    public function __construct()\n+    {\n+        $this->middleware(['auth', 'professor']);\n+        $this->authorizeResource(Cours::class, 'cours');\n+    }\n+    /**\n+     * Display a listing of the resource.\n+     *\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+    public function index()\n+    {\n+\n+        $classes = Classe::where('is_delete', false)->get();\n+        return view('Professeurs.profdashboard', compact('classes'));\n+        \n+    }\n+    public function showCompleteProfileForm()\n+    {\n+        return view('Professeurs.complete-profile');\n+    }\n+    public function completeProfile(CompleterProfilProfRequest $request)\n+    {\n+        $validatedData = $request->validated();\n+        $user = Auth::user();\n+        $role = DB::table('usersroles')\n+            ->where('user_id', $user->id)\n+            ->first();\n+        if ($role && $role->role_id == 1) {\n+            $professeur = Professeur::where('user_id', $user->id)->first();\n+            if (!$professeur) {\n+                $professeur = new Professeur();\n+                $professeur->user_id = $user->id;\n+            }\n+            $professeur->nom = $validatedData['nom'];\n+            $professeur->prenoms = $validatedData['prenoms'];\n+            $professeur->spécialiter = $validatedData['spécialiter'];\n+            $professeur->adresse = $validatedData['adresse'];\n+            $professeur->telephone = $validatedData['telephone'];\n+            $professeur->is_completed = true; \n+            $professeur->save();\n+            return redirect()->route('professeurs.dashboard')->with('success', 'Profil complété avec succès.');\n+        }\n+\n+        return redirect()->route('home')->with('error', 'Vous n\\'avez pas les droits nécessaires pour compléter ce profil.');\n+    }\n+    /**\n+     * Show the form for creating a new resource.\n+     *\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+\n+    public function create($id)\n+    {\n+        $this->authorize('create', Cours::class);\n+        $classe = Classe::find($id);\n+        if (!$classe) {\n+            return redirect()->route('route.vers.une.page.d.erreur')->withErrors(['error' => 'Classe non trouvée']);\n+        }\n+        $professeur = auth()->user()->professeur;\n+        // dd(  $professeur->role_id );\n+        $sallesDeClasses = SalleDeClasse::all(); \n+\n+        return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n+    }\n+\n+    \n+    \n+\n+    /**\n+     * Store a newly created resource in storage.\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+    public function store(Request $request)\n+    {\n+        $validatedData = $request->validate([\n+            'titre' => 'required|string|max:255',\n+            'descriptions' => 'required|string',\n+            'jours' => 'required|date',\n+            'heure_debut' => 'required|date_format:H:i',\n+            'heure_fin' => 'required|date_format:H:i',\n+            'fichier_cours' => 'required|file|mimes:pdf,doc,docx,ppt,pptx',\n+            'classe_id' => 'required|exists:classes,id',\n+        ]);\n+        try {\n+            $professeur = auth()->user()->professeur;\n+            $classeId = $validatedData['classe_id'];\n+            $classe = Classe::findOrFail($classeId);\n+    \n+         \n+            if (!$professeur->classes->contains($classe)) {\n+                return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n+            }\n+    \n+            $filePath = $request->file('fichier_cours')->store('public/cours_fichiers');\n+            $cours = new Cours();\n+            $cours->titre = $validatedData['titre'];\n+            $cours->descriptions = $validatedData['descriptions'];\n+            $cours->jours = $validatedData['jours'];\n+            $cours->heure_debut = $validatedData['heure_debut'];\n+            $cours->heure_fin = $validatedData['heure_fin'];\n+            $cours->fichier_cours = $filePath;\n+            $cours->professeur_id = $professeur->id;\n+            $cours->classe_id = $validatedData['classe_id'];\n+            $cours->save();\n+    \n+            return redirect()->route('professeurs.cours.list.prof', $validatedData['classe_id'])\n+                             ->with('success', 'Cours créé avec succès.');\n+        } catch (\\Exception $e) {\n+            return back()->withErrors(['error' => 'Une erreur est survenue lors de la création du cours.']);\n+        }\n+    }\n+    \n+    /**\n+     * Display the specified resource.\n+     *\n+     * @param  \\App\\Models\\Professeur  $professeur\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+    public function show($id)\n+    {\n+        $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n+        $this->authorize('view', $classe);\n+        // dd('ooh');\n+        $eleve= Eleves::whereNull('classe_id')->get();\n+        $professeursAssignes = $classe->professeurs;\n+        return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n+    }\n+\n+    /**\n+     * Show the form for editing the specified resource.\n+     *\n+     * @param  \\App\\Models\\Professeur  $professeur\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+    public function edit($id)\n+    {\n+        $cours = Cours::find($id);\n+\n+    if (!$cours) {\n+        return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n+    }\n+    return view('Professeurs.Cours.editCours', compact('cours'));\n+    }\n+\n+    /**\n+     * Update the specified resource in storage.\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @param  \\App\\Models\\Professeur  $professeur\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+    public function update(Request $request, $id)\n+    {\n+        $this->authorize('updade', Cours::class);\n+\n+        $cours = Cours::find($id);\n+    \n+        if (!$cours) {\n+            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n+        }\n+        $validatedData = $request->validate([\n+            'titre' => 'required|string|max:255',\n+            'descriptions' => 'required|string',\n+            'jours' => 'required|date',\n+            'heure_debut' => 'required|date_format:H:i',\n+            'heure_fin' => 'required|date_format:H:i',\n+            'fichier_cours' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx',\n+        ]);\n+        \n+    \n+        if ($request->hasFile('fichier_cours')) {\n+            $filePath = $request->file('fichier_cours')->store('cours_fichiers', 'public');\n+            $cours->fichier_cours = $filePath;\n+        }\n+    \n+        $cours->titre = $validatedData['titre'];\n+        $cours->descriptions = $validatedData['descriptions'];\n+        $cours->jours = $validatedData['jours'];\n+        $cours->heure_debut = $validatedData['heure_debut'];\n+        $cours->heure_fin = $validatedData['heure_fin'];\n+        $cours->save();\n+    \n+        return redirect()->route('professeurs.cours.list.prof')->with('success', 'Cours mis à jour avec succès.');\n+    }\n+\n+    /**\n+     * Remove the specified resource from storage.\n+     *\n+     * @param  \\App\\Models\\Professeur  $professeur\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+    public function destroy($id)\n+    {\n+        $this->authorize('create', Cours::class);\n+\n+        $cours = Cours::find($id);\n+\n+        if (!$cours) {\n+            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n+        }\n+\n+        $cours->is_deleted = true;\n+        $cours->save();\n+\n+    return back();\n+    }\n+\n+    public function listeCours($id)\n+    {\n+        $professeur = auth()->user()->professeur;\n+        $classe = Classe::findOrFail($id);\n+        // dd($professeur, $classe, $classeId);\n+        if (!$professeur->classes->contains($classe)) {\n+            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à voir les cours de cette classe.']);\n+        }\n+        $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n+        return view('Professeurs.Cours.listCours', compact('classe', 'cours'));\n+    }\n+    \n+    \n+    \n+    public function detailCours($id)\n+    {\n+        $cours = Cours::findOrFail($id);\n+        $classe= $cours->classe->id;\n+    if (!$cours) {\n+        return redirect()->route('cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n+    }\n+        return  view('Professeurs.Cours.coursDetail',compact('cours','classe'));\n+    }\n+    \n+    public function editProfile()\n+    {\n+        $professeur = Auth::user()->professeur;\n+        return view('Professeurs.profileEdit', compact('professeur'));\n+    }\n+\n+    public function updateProfile(UpdateProfessorProfileRequest $request)\n+    {\n+        $user = Auth::user();\n+        $professeur = $user->professeur;\n+        $data = $request->validated();\n+    //     $data = $request->validate([\n+    //     'nom' => 'required|string|max:255',\n+    //     'prenoms'  =>  'required|string|max:255',\n+    //     'adresse'  =>  'required|string|max:255',\n+    //     'spécialiter'  =>  'required|string|max:255',\n+    //     'telephone'  =>  'required|string|max:255',\n+      \n+    // ]);\n+\n+    $professeur->update($data);\n+    return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n+    }\n+}\n"
                },
                {
                    "date": 1731318929435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n      */\n     public function show($id)\n     {\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n-        $this->authorize('view', $classe);\n+        // $this->authorize('view', $classe);\n         // dd('ooh');\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n@@ -273,280 +273,4 @@\n     $professeur->update($data);\n     return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n     }\n }\n-<?php\n-\n-namespace App\\Http\\Controllers;\n-\n-use App\\Models\\Cours;\n-use App\\Models\\Classe;\n-use App\\Models\\Eleves;\n-use App\\Models\\Professeur;\n-use Illuminate\\Http\\Request;\n-use App\\Models\\SalleDeClasse;\n-use Illuminate\\Support\\Facades\\DB;\n-use Illuminate\\Support\\Facades\\Auth;\n-use Illuminate\\Support\\Facades\\Storage;\n-use App\\Http\\Requests\\CompleterProfilProfRequest;\n-use App\\Http\\Requests\\UpdateProfessorProfileRequest;\n-\n-class ProfesseurController extends Controller\n-{\n-    public function __construct()\n-    {\n-        $this->middleware(['auth', 'professor']);\n-        $this->authorizeResource(Cours::class, 'cours');\n-    }\n-    /**\n-     * Display a listing of the resource.\n-     *\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-    public function index()\n-    {\n-\n-        $classes = Classe::where('is_delete', false)->get();\n-        return view('Professeurs.profdashboard', compact('classes'));\n-        \n-    }\n-    public function showCompleteProfileForm()\n-    {\n-        return view('Professeurs.complete-profile');\n-    }\n-    public function completeProfile(CompleterProfilProfRequest $request)\n-    {\n-        $validatedData = $request->validated();\n-        $user = Auth::user();\n-        $role = DB::table('usersroles')\n-            ->where('user_id', $user->id)\n-            ->first();\n-        if ($role && $role->role_id == 1) {\n-            $professeur = Professeur::where('user_id', $user->id)->first();\n-            if (!$professeur) {\n-                $professeur = new Professeur();\n-                $professeur->user_id = $user->id;\n-            }\n-            $professeur->nom = $validatedData['nom'];\n-            $professeur->prenoms = $validatedData['prenoms'];\n-            $professeur->spécialiter = $validatedData['spécialiter'];\n-            $professeur->adresse = $validatedData['adresse'];\n-            $professeur->telephone = $validatedData['telephone'];\n-            $professeur->is_completed = true; \n-            $professeur->save();\n-            return redirect()->route('professeurs.dashboard')->with('success', 'Profil complété avec succès.');\n-        }\n-\n-        return redirect()->route('home')->with('error', 'Vous n\\'avez pas les droits nécessaires pour compléter ce profil.');\n-    }\n-    /**\n-     * Show the form for creating a new resource.\n-     *\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-\n-    public function create($id)\n-    {\n-        $this->authorize('create', Cours::class);\n-        $classe = Classe::find($id);\n-        if (!$classe) {\n-            return redirect()->route('route.vers.une.page.d.erreur')->withErrors(['error' => 'Classe non trouvée']);\n-        }\n-        $professeur = auth()->user()->professeur;\n-        // dd(  $professeur->role_id );\n-        $sallesDeClasses = SalleDeClasse::all(); \n-\n-        return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n-    }\n-\n-    \n-    \n-\n-    /**\n-     * Store a newly created resource in storage.\n-     *\n-     * @param  \\Illuminate\\Http\\Request  $request\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-    public function store(Request $request)\n-    {\n-        $validatedData = $request->validate([\n-            'titre' => 'required|string|max:255',\n-            'descriptions' => 'required|string',\n-            'jours' => 'required|date',\n-            'heure_debut' => 'required|date_format:H:i',\n-            'heure_fin' => 'required|date_format:H:i',\n-            'fichier_cours' => 'required|file|mimes:pdf,doc,docx,ppt,pptx',\n-            'classe_id' => 'required|exists:classes,id',\n-        ]);\n-        try {\n-            $professeur = auth()->user()->professeur;\n-            $classeId = $validatedData['classe_id'];\n-            $classe = Classe::findOrFail($classeId);\n-    \n-         \n-            if (!$professeur->classes->contains($classe)) {\n-                return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n-            }\n-    \n-            $filePath = $request->file('fichier_cours')->store('public/cours_fichiers');\n-            $cours = new Cours();\n-            $cours->titre = $validatedData['titre'];\n-            $cours->descriptions = $validatedData['descriptions'];\n-            $cours->jours = $validatedData['jours'];\n-            $cours->heure_debut = $validatedData['heure_debut'];\n-            $cours->heure_fin = $validatedData['heure_fin'];\n-            $cours->fichier_cours = $filePath;\n-            $cours->professeur_id = $professeur->id;\n-            $cours->classe_id = $validatedData['classe_id'];\n-            $cours->save();\n-    \n-            return redirect()->route('professeurs.cours.list.prof', $validatedData['classe_id'])\n-                             ->with('success', 'Cours créé avec succès.');\n-        } catch (\\Exception $e) {\n-            return back()->withErrors(['error' => 'Une erreur est survenue lors de la création du cours.']);\n-        }\n-    }\n-    \n-    /**\n-     * Display the specified resource.\n-     *\n-     * @param  \\App\\Models\\Professeur  $professeur\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-    public function show($id)\n-    {\n-        $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n-        $this->authorize('view', $classe);\n-        dd('ooh');\n-        $eleve= Eleves::whereNull('classe_id')->get();\n-        $professeursAssignes = $classe->professeurs;\n-        return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n-    }\n-\n-    /**\n-     * Show the form for editing the specified resource.\n-     *\n-     * @param  \\App\\Models\\Professeur  $professeur\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-    public function edit($id)\n-    {\n-        $cours = Cours::find($id);\n-\n-    if (!$cours) {\n-        return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n-    }\n-    return view('Professeurs.Cours.editCours', compact('cours'));\n-    }\n-\n-    /**\n-     * Update the specified resource in storage.\n-     *\n-     * @param  \\Illuminate\\Http\\Request  $request\n-     * @param  \\App\\Models\\Professeur  $professeur\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-    public function update(Request $request, $id)\n-    {\n-        $this->authorize('updade', Cours::class);\n-\n-        $cours = Cours::find($id);\n-    \n-        if (!$cours) {\n-            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n-        }\n-        $validatedData = $request->validate([\n-            'titre' => 'required|string|max:255',\n-            'descriptions' => 'required|string',\n-            'jours' => 'required|date',\n-            'heure_debut' => 'required|date_format:H:i',\n-            'heure_fin' => 'required|date_format:H:i',\n-            'fichier_cours' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx',\n-        ]);\n-        \n-    \n-        if ($request->hasFile('fichier_cours')) {\n-            $filePath = $request->file('fichier_cours')->store('cours_fichiers', 'public');\n-            $cours->fichier_cours = $filePath;\n-        }\n-    \n-        $cours->titre = $validatedData['titre'];\n-        $cours->descriptions = $validatedData['descriptions'];\n-        $cours->jours = $validatedData['jours'];\n-        $cours->heure_debut = $validatedData['heure_debut'];\n-        $cours->heure_fin = $validatedData['heure_fin'];\n-        $cours->save();\n-    \n-        return redirect()->route('professeurs.cours.list.prof')->with('success', 'Cours mis à jour avec succès.');\n-    }\n-\n-    /**\n-     * Remove the specified resource from storage.\n-     *\n-     * @param  \\App\\Models\\Professeur  $professeur\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-    public function destroy($id)\n-    {\n-        $this->authorize('create', Cours::class);\n-\n-        $cours = Cours::find($id);\n-\n-        if (!$cours) {\n-            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n-        }\n-\n-        $cours->is_deleted = true;\n-        $cours->save();\n-\n-    return back();\n-    }\n-\n-    public function listeCours($id)\n-    {\n-        $professeur = auth()->user()->professeur;\n-        $classe = Classe::findOrFail($id);\n-        // dd($professeur, $classe, $classeId);\n-        if (!$professeur->classes->contains($classe)) {\n-            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à voir les cours de cette classe.']);\n-        }\n-        $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n-        return view('Professeurs.Cours.listCours', compact('classe', 'cours'));\n-    }\n-    \n-    \n-    \n-    public function detailCours($id)\n-    {\n-        $cours = Cours::findOrFail($id);\n-        $classe= $cours->classe->id;\n-    if (!$cours) {\n-        return redirect()->route('cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n-    }\n-        return  view('Professeurs.Cours.coursDetail',compact('cours','classe'));\n-    }\n-    \n-    public function editProfile()\n-    {\n-        $professeur = Auth::user()->professeur;\n-        return view('Professeurs.profileEdit', compact('professeur'));\n-    }\n-\n-    public function updateProfile(UpdateProfessorProfileRequest $request)\n-    {\n-        $user = Auth::user();\n-        $professeur = $user->professeur;\n-        $data = $request->validated();\n-    //     $data = $request->validate([\n-    //     'nom' => 'required|string|max:255',\n-    //     'prenoms'  =>  'required|string|max:255',\n-    //     'adresse'  =>  'required|string|max:255',\n-    //     'spécialiter'  =>  'required|string|max:255',\n-    //     'telephone'  =>  'required|string|max:255',\n-      \n-    // ]);\n-\n-    $professeur->update($data);\n-    return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n-    }\n-}\n"
                },
                {
                    "date": 1731318950553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n      */\n     public function show($id)\n     {\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n-        // $this->authorize('view', $classe);\n+        $this->authorize('view', $classe);\n         // dd('ooh');\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n"
                },
                {
                    "date": 1731319598122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,9 @@\n      */\n     public function show($id)\n     {\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n+        \n         $this->authorize('view', $classe);\n         // dd('ooh');\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n"
                },
                {
                    "date": 1731319982902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,11 +139,10 @@\n      */\n     public function show($id)\n     {\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n-        \n+\n         $this->authorize('view', $classe);\n-        // dd('ooh');\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     }\n"
                },
                {
                    "date": 1731320014777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n         $this->authorizeResource(Cours::class, 'cours');\n+        \n     }\n     /**\n      * Display a listing of the resource.\n      *\n"
                },
                {
                    "date": 1731320023131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,15 @@\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n         $this->authorizeResource(Cours::class, 'cours');\n-        \n+        $this->authorizeResource(final class ProfesseurController extends AnotherClass implements Interface\n+        {\n+            \n+        }\n+        ::class, 'cours');\n+\n+\n     }\n     /**\n      * Display a listing of the resource.\n      *\n"
                },
                {
                    "date": 1731320031555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,13 +19,9 @@\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n         $this->authorizeResource(Cours::class, 'cours');\n-        $this->authorizeResource(final class ProfesseurController extends AnotherClass implements Interface\n-        {\n-            \n-        }\n-        ::class, 'cours');\n+        $this->authorizeResource(Class::class, 'classe');\n \n \n     }\n     /**\n"
                },
                {
                    "date": 1731320039428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n         $this->authorizeResource(Cours::class, 'cours');\n-        $this->authorizeResource(Class::class, 'classe');\n+        $this->authorizeResource(Classe::class, 'classe');\n \n \n     }\n     /**\n"
                },
                {
                    "date": 1731320055588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,8 @@\n         if (!$classe) {\n             return redirect()->route('route.vers.une.page.d.erreur')->withErrors(['error' => 'Classe non trouvée']);\n         }\n         $professeur = auth()->user()->professeur;\n-        // dd(  $professeur->role_id );\n         $sallesDeClasses = SalleDeClasse::all(); \n \n         return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n     }\n"
                },
                {
                    "date": 1731320113348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     public function show($id)\n     {\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n \n-        $this->authorize('view', $classe);\n+        // $this->authorize('view', $classe);\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     }\n"
                },
                {
                    "date": 1731320124645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     public function show($id)\n     {\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n \n-        // $this->authorize('view', $classe);\n+        $this->authorize('view', $classe);\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     }\n"
                },
                {
                    "date": 1731320134435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n         $this->authorizeResource(Cours::class, 'cours');\n-        $this->authorizeResource(Classe::class, 'classe');\n+        // $this->authorizeResource(Classe::class, 'classe');\n \n \n     }\n     /**\n"
                },
                {
                    "date": 1731320153347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n {\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n-        $this->authorizeResource(Cours::class, 'cours');\n+        // $this->authorizeResource(Cours::class, 'cours');\n         // $this->authorizeResource(Classe::class, 'classe');\n \n \n     }\n"
                },
                {
                    "date": 1731320395182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,9 @@\n {\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n-        // $this->authorizeResource(Cours::class, 'cours');\n-        // $this->authorizeResource(Classe::class, 'classe');\n+      \n \n \n     }\n     /**\n"
                },
                {
                    "date": 1731320402777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,20 +18,16 @@\n {\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n-      \n-\n-\n     }\n     /**\n      * Display a listing of the resource.\n      *\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function index()\n     {\n-\n         $classes = Classe::where('is_delete', false)->get();\n         return view('Professeurs.profdashboard', compact('classes'));\n         \n     }\n"
                },
                {
                    "date": 1731320413211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n     public function index()\n     {\n         $classes = Classe::where('is_delete', false)->get();\n         return view('Professeurs.profdashboard', compact('classes'));\n-        \n     }\n     public function showCompleteProfileForm()\n     {\n         return view('Professeurs.complete-profile');\n@@ -77,12 +76,8 @@\n         $sallesDeClasses = SalleDeClasse::all(); \n \n         return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n     }\n-\n-    \n-    \n-\n     /**\n      * Store a newly created resource in storage.\n      *\n      * @param  \\Illuminate\\Http\\Request  $request\n"
                },
                {
                    "date": 1731320424301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,8 @@\n     public function listeCours($id)\n     {\n         $professeur = auth()->user()->professeur;\n         $classe = Classe::findOrFail($id);\n-        // dd($professeur, $classe, $classeId);\n         if (!$professeur->classes->contains($classe)) {\n             return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à voir les cours de cette classe.']);\n         }\n         $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n"
                },
                {
                    "date": 1731320438987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,17 +250,9 @@\n     public function updateProfile(UpdateProfessorProfileRequest $request)\n     {\n         $user = Auth::user();\n         $professeur = $user->professeur;\n-        $data = $request->validated();\n-    //     $data = $request->validate([\n-    //     'nom' => 'required|string|max:255',\n-    //     'prenoms'  =>  'required|string|max:255',\n-    //     'adresse'  =>  'required|string|max:255',\n-    //     'spécialiter'  =>  'required|string|max:255',\n-    //     'telephone'  =>  'required|string|max:255',\n-      \n-    // ]);\n+   \n \n     $professeur->update($data);\n     return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n     }\n"
                },
                {
                    "date": 1731320446564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,10 +250,8 @@\n     public function updateProfile(UpdateProfessorProfileRequest $request)\n     {\n         $user = Auth::user();\n         $professeur = $user->professeur;\n-   \n-\n-    $professeur->update($data);\n-    return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n+       $professeur->update($data);\n+       return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n     }\n }\n"
                },
                {
                    "date": 1731320452815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,11 +227,8 @@\n         }\n         $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n         return view('Professeurs.Cours.listCours', compact('classe', 'cours'));\n     }\n-    \n-    \n-    \n     public function detailCours($id)\n     {\n         $cours = Cours::findOrFail($id);\n         $classe= $cours->classe->id;\n"
                },
                {
                    "date": 1731322479875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,8 @@\n          \n             if (!$professeur->classes->contains($classe)) {\n                 return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n             }\n-    \n             $filePath = $request->file('fichier_cours')->store('public/cours_fichiers');\n             $cours = new Cours();\n             $cours->titre = $validatedData['titre'];\n             $cours->descriptions = $validatedData['descriptions'];\n"
                },
                {
                    "date": 1731322487759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,8 @@\n         try {\n             $professeur = auth()->user()->professeur;\n             $classeId = $validatedData['classe_id'];\n             $classe = Classe::findOrFail($classeId);\n-    \n          \n             if (!$professeur->classes->contains($classe)) {\n                 return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n             }\n"
                },
                {
                    "date": 1731322796485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,10 @@\n      *\n      * @param  \\Illuminate\\Http\\Request  $request\n      * @return \\Illuminate\\Http\\Response\n      */\n+    use Illuminate\\Support\\Facades\\Log;\n+\n     public function store(Request $request)\n     {\n         $validatedData = $request->validate([\n             'titre' => 'required|string|max:255',\n@@ -97,12 +99,13 @@\n         try {\n             $professeur = auth()->user()->professeur;\n             $classeId = $validatedData['classe_id'];\n             $classe = Classe::findOrFail($classeId);\n-         \n+    \n             if (!$professeur->classes->contains($classe)) {\n                 return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n             }\n+    \n             $filePath = $request->file('fichier_cours')->store('public/cours_fichiers');\n             $cours = new Cours();\n             $cours->titre = $validatedData['titre'];\n             $cours->descriptions = $validatedData['descriptions'];\n@@ -116,12 +119,19 @@\n     \n             return redirect()->route('professeurs.cours.list.prof', $validatedData['classe_id'])\n                              ->with('success', 'Cours créé avec succès.');\n         } catch (\\Exception $e) {\n+            // Journalisation de l'erreur\n+            Log::error('Erreur lors de la création du cours:', [\n+                'error_message' => $e->getMessage(),\n+                'stack_trace' => $e->getTraceAsString(),\n+            ]);\n+    \n             return back()->withErrors(['error' => 'Une erreur est survenue lors de la création du cours.']);\n         }\n     }\n     \n+    \n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Professeur  $professeur\n"
                },
                {
                    "date": 1731322969263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,8 @@\n      *\n      * @param  \\Illuminate\\Http\\Request  $request\n      * @return \\Illuminate\\Http\\Response\n      */\n-    use Illuminate\\Support\\Facades\\Log;\n \n     public function store(Request $request)\n     {\n         $validatedData = $request->validate([\n"
                },
                {
                    "date": 1731322976757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n use Illuminate\\Support\\Facades\\Auth;\n use Illuminate\\Support\\Facades\\Storage;\n use App\\Http\\Requests\\CompleterProfilProfRequest;\n use App\\Http\\Requests\\UpdateProfessorProfileRequest;\n+use Illuminate\\Support\\Facades\\Log;\n \n class ProfesseurController extends Controller\n {\n     public function __construct()\n"
                },
                {
                    "date": 1731323806865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n             $cours->professeur_id = $professeur->id;\n             $cours->classe_id = $validatedData['classe_id'];\n             $cours->save();\n     \n-            return redirect()->route('professeurs.cours.list.prof', $validatedData['classe_id'])\n+            return redirect()->route('professeurs.cours.list', $validatedData['classe_id'])\n                              ->with('success', 'Cours créé avec succès.');\n         } catch (\\Exception $e) {\n             // Journalisation de l'erreur\n             Log::error('Erreur lors de la création du cours:', [\n"
                },
                {
                    "date": 1731324671611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,8 @@\n      */\n     public function edit($id)\n     {\n         $cours = Cours::find($id);\n-\n     if (!$cours) {\n         return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n     }\n     return view('Professeurs.Cours.editCours', compact('cours'));\n"
                },
                {
                    "date": 1731324725340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,13 +155,13 @@\n      */\n     public function edit($id)\n     {\n         $cours = Cours::find($id);\n-    if (!$cours) {\n-        return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n+            if (!$cours) {\n+                return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n+            }\n+            return view('Professeurs.Cours.editCours', compact('cours'));\n     }\n-    return view('Professeurs.Cours.editCours', compact('cours'));\n-    }\n \n     /**\n      * Update the specified resource in storage.\n      *\n"
                },
                {
                    "date": 1731324833171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,9 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function edit($id)\n     {\n+        $sallesDeClasses = SalleDeClasse::all();\n         $cours = Cours::find($id);\n             if (!$cours) {\n                 return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n             }\n"
                },
                {
                    "date": 1731324851473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n         $cours = Cours::find($id);\n             if (!$cours) {\n                 return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n             }\n-            return view('Professeurs.Cours.editCours', compact('cours'));\n+            return view('Professeurs.Cours.editCours', compact('cours', 'sallesDeClasses'));\n     }\n \n     /**\n      * Update the specified resource in storage.\n"
                },
                {
                    "date": 1731326409120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,8 @@\n     {\n         $this->authorize('updade', Cours::class);\n \n         $cours = Cours::find($id);\n-    \n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n         $validatedData = $request->validate([\n"
                },
                {
                    "date": 1731326423463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n {\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n+        \n     }\n     /**\n      * Display a listing of the resource.\n      *\n@@ -172,9 +173,8 @@\n      */\n     public function update(Request $request, $id)\n     {\n         $this->authorize('updade', Cours::class);\n-\n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n"
                },
                {
                    "date": 1731327606285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n {\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n-        \n+    $this->isAuthorize(Cours::class);\n+\n     }\n     /**\n      * Display a listing of the resource.\n      *\n"
                },
                {
                    "date": 1731327635317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n {\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n-    $this->isAuthorize(Cours::class);\n+        $this->isAuthorize(Cours::class);\n \n     }\n     /**\n      * Display a listing of the resource.\n"
                },
                {
                    "date": 1731327808120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n {\n     public function __construct()\n     {\n         $this->middleware(['auth', 'professor']);\n-        $this->isAuthorize(Cours::class);\n \n     }\n     /**\n      * Display a listing of the resource.\n"
                },
                {
                    "date": 1731327951909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        $this->authorize('updade', Cours::class);\n+        $this->authorize('updade');\n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n"
                },
                {
                    "date": 1731327995429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n     {\n         $this->authorize('updade');\n         $cours = Cours::find($id);\n         if (!$cours) {\n-            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n+            return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n         $validatedData = $request->validate([\n             'titre' => 'required|string|max:255',\n             'descriptions' => 'required|string',\n"
                },
                {
                    "date": 1731328005958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        $this->authorize('updade');\n+        $this->authorize('updade',);\n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n"
                },
                {
                    "date": 1731328012773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        $this->authorize('updade',);\n+        $this->authorize('updade', $id);\n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n"
                },
                {
                    "date": 1731328042485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        $this->authorize('updade', $id);\n+        $this->authorize('updade', Cour);\n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n"
                },
                {
                    "date": 1731328056441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,10 +172,11 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        $this->authorize('updade', Cour);\n+        $this->authorize('updade', Cours::class);\n         $cours = Cours::find($id);\n+        dd()\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n         $validatedData = $request->validate([\n"
                },
                {
                    "date": 1731328062387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n     public function update(Request $request, $id)\n     {\n         $this->authorize('updade', Cours::class);\n         $cours = Cours::find($id);\n-        dd()\n+        dd('ok');\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n         $validatedData = $request->validate([\n"
                },
                {
                    "date": 1731328090525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,8 @@\n             'heure_debut' => 'required|date_format:H:i',\n             'heure_fin' => 'required|date_format:H:i',\n             'fichier_cours' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx',\n         ]);\n-        \n     \n         if ($request->hasFile('fichier_cours')) {\n             $filePath = $request->file('fichier_cours')->store('cours_fichiers', 'public');\n             $cours->fichier_cours = $filePath;\n"
                },
                {
                    "date": 1731328098323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,14 +186,12 @@\n             'heure_debut' => 'required|date_format:H:i',\n             'heure_fin' => 'required|date_format:H:i',\n             'fichier_cours' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx',\n         ]);\n-    \n         if ($request->hasFile('fichier_cours')) {\n             $filePath = $request->file('fichier_cours')->store('cours_fichiers', 'public');\n             $cours->fichier_cours = $filePath;\n         }\n-    \n         $cours->titre = $validatedData['titre'];\n         $cours->descriptions = $validatedData['descriptions'];\n         $cours->jours = $validatedData['jours'];\n         $cours->heure_debut = $validatedData['heure_debut'];\n"
                },
                {
                    "date": 1731328161005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,11 +172,11 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n+        dd('ok');\n         $this->authorize('updade', Cours::class);\n         $cours = Cours::find($id);\n-        dd('ok');\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n         $validatedData = $request->validate([\n"
                },
                {
                    "date": 1731328755139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        dd('ok');\n+        // dd('ok');\n         $this->authorize('updade', Cours::class);\n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n"
                },
                {
                    "date": 1731328849327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,26 +172,30 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        // dd('ok');\n-        $this->authorize('updade', Cours::class);\n+        $this->authorize('update', Cours::class);  // Appel de la politique\n+    \n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n+    \n+        // Validation et mise à jour du cours\n         $validatedData = $request->validate([\n             'titre' => 'required|string|max:255',\n             'descriptions' => 'required|string',\n             'jours' => 'required|date',\n             'heure_debut' => 'required|date_format:H:i',\n             'heure_fin' => 'required|date_format:H:i',\n             'fichier_cours' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx',\n         ]);\n+    \n         if ($request->hasFile('fichier_cours')) {\n             $filePath = $request->file('fichier_cours')->store('cours_fichiers', 'public');\n             $cours->fichier_cours = $filePath;\n         }\n+    \n         $cours->titre = $validatedData['titre'];\n         $cours->descriptions = $validatedData['descriptions'];\n         $cours->jours = $validatedData['jours'];\n         $cours->heure_debut = $validatedData['heure_debut'];\n@@ -199,8 +203,9 @@\n         $cours->save();\n     \n         return redirect()->route('professeurs.cours.list.prof')->with('success', 'Cours mis à jour avec succès.');\n     }\n+    \n \n     /**\n      * Remove the specified resource from storage.\n      *\n"
                },
                {
                    "date": 1731329119868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        $this->authorize('update', Cours::class);  // Appel de la politique\n+        // $this->authorize('update', Cours::class);  \n     \n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n"
                },
                {
                    "date": 1731332375161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,14 +173,13 @@\n      */\n     public function update(Request $request, $id)\n     {\n         // $this->authorize('update', Cours::class);  \n-    \n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n-    \n+        $this->authorize('update', $cours);\n         // Validation et mise à jour du cours\n         $validatedData = $request->validate([\n             'titre' => 'required|string|max:255',\n             'descriptions' => 'required|string',\n"
                },
                {
                    "date": 1731332382809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,15 +172,13 @@\n      * @return \\Illuminate\\Http\\Response\n      */\n     public function update(Request $request, $id)\n     {\n-        // $this->authorize('update', Cours::class);  \n         $cours = Cours::find($id);\n         if (!$cours) {\n             return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n         $this->authorize('update', $cours);\n-        // Validation et mise à jour du cours\n         $validatedData = $request->validate([\n             'titre' => 'required|string|max:255',\n             'descriptions' => 'required|string',\n             'jours' => 'required|date',\n"
                },
                {
                    "date": 1731332397777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,9 @@\n \n         $this->authorize('view', $classe);\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n+        dd\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     }\n \n     /**\n"
                },
                {
                    "date": 1731332405505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n \n         $this->authorize('view', $classe);\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n-        dd\n+        dd(  $professeursAssignes)\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     }\n \n     /**\n"
                },
                {
                    "date": 1731332443955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n \n         $this->authorize('view', $classe);\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n-        dd(  $professeursAssignes)\n+        dd($professeursAssignes);\n         return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     }\n \n     /**\n"
                },
                {
                    "date": 1731332463643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n      */\n     public function show($id)\n     {\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n-\n+        \n         $this->authorize('view', $classe);\n         $eleve= Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n         dd($professeursAssignes);\n"
                },
                {
                    "date": 1731333088951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,18 +137,18 @@\n      *\n      * @param  \\App\\Models\\Professeur  $professeur\n      * @return \\Illuminate\\Http\\Response\n      */\n-    public function show($id)\n-    {\n-        $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n+    // public function show($id)\n+    // {\n+    //     $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n         \n-        $this->authorize('view', $classe);\n-        $eleve= Eleves::whereNull('classe_id')->get();\n-        $professeursAssignes = $classe->professeurs;\n-        dd($professeursAssignes);\n-        return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n-    }\n+    //     $this->authorize('view', $classe);\n+    //     $eleve= Eleves::whereNull('classe_id')->get();\n+    //     $professeursAssignes = $classe->professeurs;\n+    //     dd($professeursAssignes);\n+    //     return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n+    // }\n \n     /**\n      * Show the form for editing the specified resource.\n      *\n"
                },
                {
                    "date": 1731333245706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,30 @@\n     //     dd($professeursAssignes);\n     //     return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     // }\n \n+    public function show($id)\n+{\n+    $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n+    \n+    // Vérifier si le professeur est affecté à la classe\n+    $administrateur = auth()->user(); // Assuming you have the authenticated admin/professor\n+    $professeurAffecte = $classe->professeurs->contains($administrateur);\n+\n+    // Si le professeur n'est pas affecté à cette classe, retournez une erreur\n+    if (!$professeurAffecte) {\n+        return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+    }\n+\n+    // Autoriser l'accès\n+    $this->authorize('view', $classe);\n+\n+    // Continuer avec la logique normale\n+    $eleve = Eleves::whereNull('classe_id')->get();\n+    $professeursAssignes = $classe->professeurs;\n+    return view('Professeurs.Classes.classesDetail', compact('classe', 'professeursAssignes', 'eleve'));\n+}\n+\n     /**\n      * Show the form for editing the specified resource.\n      *\n      * @param  \\App\\Models\\Professeur  $professeur\n"
                },
                {
                    "date": 1731338856289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,29 +149,30 @@\n     //     return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n     // }\n \n     public function show($id)\n-{\n-    $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n+    {\n+        // Récupérer la classe avec ses relations\n+        $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n+        \n+        // Vérifier si l'utilisateur connecté est un professeur affecté à cette classe\n+        $professeur = auth()->user();\n     \n-    // Vérifier si le professeur est affecté à la classe\n-    $administrateur = auth()->user(); // Assuming you have the authenticated admin/professor\n-    $professeurAffecte = $classe->professeurs->contains($administrateur);\n-\n-    // Si le professeur n'est pas affecté à cette classe, retournez une erreur\n-    if (!$professeurAffecte) {\n-        return redirect()->route('professeurs.classes.index')->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+        // Vérifiez que le professeur est bien associé à la classe\n+        if (!$classe->professeurs->contains($professeur->id)) {\n+            return redirect()->route('professeurs.classes.index')\n+                ->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n+        }\n+    \n+        // Récupérer les élèves sans classe et les professeurs assignés pour la vue\n+        $elevesSansClasse = Eleves::whereNull('classe_id')->get();\n+        $professeursAssignes = $classe->professeurs;\n+    \n+        // Retourner la vue avec les données nécessaires\n+        return view('Professeurs.Classes.classesDetail', compact('classe', 'professeursAssignes', 'elevesSansClasse'));\n     }\n+    \n \n-    // Autoriser l'accès\n-    $this->authorize('view', $classe);\n-\n-    // Continuer avec la logique normale\n-    $eleve = Eleves::whereNull('classe_id')->get();\n-    $professeursAssignes = $classe->professeurs;\n-    return view('Professeurs.Classes.classesDetail', compact('classe', 'professeursAssignes', 'eleve'));\n-}\n-\n     /**\n      * Show the form for editing the specified resource.\n      *\n      * @param  \\App\\Models\\Professeur  $professeur\n"
                },
                {
                    "date": 1731339696519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,18 +137,9 @@\n      *\n      * @param  \\App\\Models\\Professeur  $professeur\n      * @return \\Illuminate\\Http\\Response\n      */\n-    // public function show($id)\n-    // {\n-    //     $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n-        \n-    //     $this->authorize('view', $classe);\n-    //     $eleve= Eleves::whereNull('classe_id')->get();\n-    //     $professeursAssignes = $classe->professeurs;\n-    //     dd($professeursAssignes);\n-    //     return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n-    // }\n+   \n \n     public function show($id)\n     {\n         // Récupérer la classe avec ses relations\n"
                },
                {
                    "date": 1731339702023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,18 +129,14 @@\n     \n             return back()->withErrors(['error' => 'Une erreur est survenue lors de la création du cours.']);\n         }\n     }\n-    \n-    \n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Professeur  $professeur\n      * @return \\Illuminate\\Http\\Response\n      */\n-   \n-\n     public function show($id)\n     {\n         // Récupérer la classe avec ses relations\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n"
                },
                {
                    "date": 1731339713883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,8 @@\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n         \n         // Vérifier si l'utilisateur connecté est un professeur affecté à cette classe\n         $professeur = auth()->user();\n-    \n         // Vérifiez que le professeur est bien associé à la classe\n         if (!$classe->professeurs->contains($professeur->id)) {\n             return redirect()->route('professeurs.classes.index')\n                 ->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n"
                },
                {
                    "date": 1731339720790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,17 +139,15 @@\n     public function show($id)\n     {\n         // Récupérer la classe avec ses relations\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n-        \n         // Vérifier si l'utilisateur connecté est un professeur affecté à cette classe\n         $professeur = auth()->user();\n         // Vérifiez que le professeur est bien associé à la classe\n         if (!$classe->professeurs->contains($professeur->id)) {\n             return redirect()->route('professeurs.classes.index')\n                 ->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n         }\n-    \n         // Récupérer les élèves sans classe et les professeurs assignés pour la vue\n         $elevesSansClasse = Eleves::whereNull('classe_id')->get();\n         $professeursAssignes = $classe->professeurs;\n     \n"
                },
                {
                    "date": 1731406796187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n         $cours->heure_debut = $validatedData['heure_debut'];\n         $cours->heure_fin = $validatedData['heure_fin'];\n         $cours->save();\n     \n-        return redirect()->route('professeurs.cours.list.prof')->with('success', 'Cours mis à jour avec succès.');\n+        return redirect()->route('professeurs.cours.list')->with('success', 'Cours mis à jour avec succès.');\n     }\n     \n \n     /**\n"
                },
                {
                    "date": 1731406803823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n \n         $cours = Cours::find($id);\n \n         if (!$cours) {\n-            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n+            return redirect()->route('professeurs.cours.list')->with('error', 'Le cours demandé n\\'existe pas.');\n         }\n \n         $cours->is_deleted = true;\n         $cours->save();\n"
                },
                {
                    "date": 1732370348742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,5 +265,7 @@\n         $professeur = $user->professeur;\n        $professeur->update($data);\n        return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n     }\n+\n+    \n }\n"
                },
                {
                    "date": 1732370384845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,6 +266,25 @@\n        $professeur->update($data);\n        return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n     }\n \n-    \n+    public function download($id)\n+{\n+    $cours = Cours::findOrFail($id);\n+\n+    // Récupérez le chemin du fichier\n+    $filePath = storage_path('app/public/' . $cours->fichier_cours);\n+\n+    // Récupérez le nom du fichier sans le chemin\n+    $fileName = basename($cours->fichier_cours);\n+\n+    // Vérifiez si le fichier existe\n+    if (file_exists($filePath)) {\n+        // Téléchargez le fichier\n+        return response()->download($filePath, $fileName);\n+    } else {\n+        // Gérez l'erreur si le fichier n'existe pas\n+        abort(404, \"Le fichier du cours n'existe pas.\");\n+    }\n }\n+\n+}\n"
                },
                {
                    "date": 1732469934192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n      * @param  \\Illuminate\\Http\\Request  $request\n      * @return \\Illuminate\\Http\\Response\n      */\n \n+     \n     public function store(Request $request)\n     {\n         $validatedData = $request->validate([\n             'titre' => 'required|string|max:255',\n"
                },
                {
                    "date": 1732470636902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,10 @@\n         if (!$classe) {\n             return redirect()->route('route.vers.une.page.d.erreur')->withErrors(['error' => 'Classe non trouvée']);\n         }\n         $professeur = auth()->user()->professeur;\n+\n+        \n         $sallesDeClasses = SalleDeClasse::all(); \n \n         return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n     }\n@@ -85,9 +87,9 @@\n      * @param  \\Illuminate\\Http\\Request  $request\n      * @return \\Illuminate\\Http\\Response\n      */\n \n-     \n+\n     public function store(Request $request)\n     {\n         $validatedData = $request->validate([\n             'titre' => 'required|string|max:255',\n@@ -130,8 +132,10 @@\n     \n             return back()->withErrors(['error' => 'Une erreur est survenue lors de la création du cours.']);\n         }\n     }\n+\n+\n     /**\n      * Display the specified resource.\n      *\n      * @param  \\App\\Models\\Professeur  $professeur\n"
                },
                {
                    "date": 1732470665839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,12 @@\n             return redirect()->route('route.vers.une.page.d.erreur')->withErrors(['error' => 'Classe non trouvée']);\n         }\n         $professeur = auth()->user()->professeur;\n \n-        \n+         // Vérifiez si le professeur est affecté à la classe\n+    if (!$professeur->classes->contains($classe)) {\n+        return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n+    }\n         $sallesDeClasses = SalleDeClasse::all(); \n \n         return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n     }\n"
                },
                {
                    "date": 1732470673325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,11 @@\n         }\n         $professeur = auth()->user()->professeur;\n \n          // Vérifiez si le professeur est affecté à la classe\n-    if (!$professeur->classes->contains($classe)) {\n-        return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n-    }\n+        if (!$professeur->classes->contains($classe)) {\n+            return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n+        }\n         $sallesDeClasses = SalleDeClasse::all(); \n \n         return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n     }\n"
                },
                {
                    "date": 1732473022530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,10 @@\n     {\n         // Récupérer la classe avec ses relations\n         $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n         // Vérifier si l'utilisateur connecté est un professeur affecté à cette classe\n-        $professeur = auth()->user();\n+        $professeur = auth()->user()->professeur;\n+\n         // Vérifiez que le professeur est bien associé à la classe\n         if (!$classe->professeurs->contains($professeur->id)) {\n             return redirect()->route('professeurs.classes.index')\n                 ->with('error', 'Vous n\\'êtes pas affecté à cette classe.');\n"
                }
            ],
            "date": 1727024262865,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Cours;\nuse App\\Models\\Classe;\nuse App\\Models\\Eleves;\nuse App\\Models\\Professeur;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\SalleDeClasse;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Storage;\nuse App\\Http\\Requests\\CompleterProfilProfRequest;\nuse App\\Http\\Requests\\UpdateProfessorProfileRequest;\n\nclass ProfesseurController extends Controller\n{\n    public function __construct()\n    {\n        $this->middleware(['auth', 'professor']);\n        $this->authorizeResource(Cours::class, 'cours');\n    }\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n\n        $classes = Classe::where('is_delete', false)->get();\n        return view('Professeurs.profdashboard', compact('classes'));\n        \n    }\n    public function showCompleteProfileForm()\n    {\n        return view('Professeurs.complete-profile');\n    }\n    public function completeProfile(CompleterProfilProfRequest $request)\n    {\n        $validatedData = $request->validated();\n        $user = Auth::user();\n        $role = DB::table('usersroles')\n            ->where('user_id', $user->id)\n            ->first();\n        if ($role && $role->role_id == 1) {\n            $professeur = Professeur::where('user_id', $user->id)->first();\n            if (!$professeur) {\n                $professeur = new Professeur();\n                $professeur->user_id = $user->id;\n            }\n            $professeur->nom = $validatedData['nom'];\n            $professeur->prenoms = $validatedData['prenoms'];\n            $professeur->spécialiter = $validatedData['spécialiter'];\n            $professeur->adresse = $validatedData['adresse'];\n            $professeur->telephone = $validatedData['telephone'];\n            $professeur->is_completed = true; \n            $professeur->save();\n            return redirect()->route('prof.dashboard')->with('success', 'Profil complété avec succès.');\n        }\n\n        return redirect()->route('home')->with('error', 'Vous n\\'avez pas les droits nécessaires pour compléter ce profil.');\n    }\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n\n    public function create($id)\n    {\n        $this->authorize('create', Cours::class);\n        $classe = Classe::find($id);\n        if (!$classe) {\n            return redirect()->route('route.vers.une.page.d.erreur')->withErrors(['error' => 'Classe non trouvée']);\n        }\n        $professeur = auth()->user()->professeur;\n        // dd(  $professeur->role_id );\n        $sallesDeClasses = SalleDeClasse::all(); \n\n        return view('Professeurs.Cours.coursCreate', compact('classe', 'sallesDeClasses'));\n    }\n\n    \n    \n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        $validatedData = $request->validate([\n            'titre' => 'required|string|max:255',\n            'descriptions' => 'required|string',\n            'jours' => 'required|date',\n            'heure_debut' => 'required|date_format:H:i',\n            'heure_fin' => 'required|date_format:H:i',\n            'fichier_cours' => 'required|file|mimes:pdf,doc,docx,ppt,pptx',\n            'classe_id' => 'required|exists:classes,id',\n        ]);\n        try {\n            $professeur = auth()->user()->professeur;\n            $classeId = $validatedData['classe_id'];\n            $classe = Classe::findOrFail($classeId);\n    \n         \n            if (!$professeur->classes->contains($classe)) {\n                return back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à ajouter un cours à cette classe.']);\n            }\n    \n            $filePath = $request->file('fichier_cours')->store('public/cours_fichiers');\n            $cours = new Cours();\n            $cours->titre = $validatedData['titre'];\n            $cours->descriptions = $validatedData['descriptions'];\n            $cours->jours = $validatedData['jours'];\n            $cours->heure_debut = $validatedData['heure_debut'];\n            $cours->heure_fin = $validatedData['heure_fin'];\n            $cours->fichier_cours = $filePath;\n            $cours->professeur_id = $professeur->id;\n            $cours->classe_id = $validatedData['classe_id'];\n            $cours->save();\n    \n            return redirect()->route('professeurs.cours.list.prof', $validatedData['classe_id'])\n                             ->with('success', 'Cours créé avec succès.');\n        } catch (\\Exception $e) {\n            return back()->withErrors(['error' => 'Une erreur est survenue lors de la création du cours.']);\n        }\n    }\n    \n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        $classe = Classe::with(['eleve', 'professeurs', 'emploisDuTemps'])->findOrFail($id);\n        $this->authorize('view', $classe);\n        dd('ooh');\n        $eleve= Eleves::whereNull('classe_id')->get();\n        $professeursAssignes = $classe->professeurs;\n        return view('Professeurs.Classes.classesDetail', compact('classe','professeursAssignes','eleve'));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id)\n    {\n        $cours = Cours::find($id);\n\n    if (!$cours) {\n        return redirect()->route('professeurs.cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n    }\n    return view('Professeurs.Cours.editCours', compact('cours'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        $this->authorize('updade', Cours::class);\n\n        $cours = Cours::find($id);\n    \n        if (!$cours) {\n            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n        }\n        $validatedData = $request->validate([\n            'titre' => 'required|string|max:255',\n            'descriptions' => 'required|string',\n            'jours' => 'required|date',\n            'heure_debut' => 'required|date_format:H:i',\n            'heure_fin' => 'required|date_format:H:i',\n            'fichier_cours' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx',\n        ]);\n        \n    \n        if ($request->hasFile('fichier_cours')) {\n            $filePath = $request->file('fichier_cours')->store('cours_fichiers', 'public');\n            $cours->fichier_cours = $filePath;\n        }\n    \n        $cours->titre = $validatedData['titre'];\n        $cours->descriptions = $validatedData['descriptions'];\n        $cours->jours = $validatedData['jours'];\n        $cours->heure_debut = $validatedData['heure_debut'];\n        $cours->heure_fin = $validatedData['heure_fin'];\n        $cours->save();\n    \n        return redirect()->route('professeurs.cours.list.prof')->with('success', 'Cours mis à jour avec succès.');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Professeur  $professeur\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        $this->authorize('create', Cours::class);\n\n        $cours = Cours::find($id);\n\n        if (!$cours) {\n            return redirect()->route('professeurs.cours.list.prof')->with('error', 'Le cours demandé n\\'existe pas.');\n        }\n\n        $cours->is_deleted = true;\n        $cours->save();\n\n    return back();\n    }\n\n    public function listeCours($id)\n    {\n        $professeur = auth()->user()->professeur;\n        $classe = Classe::findOrFail($id);\n        // dd($professeur, $classe, $classeId);\n        if (!$professeur->classes->contains($classe)) {\n            return redirect()->back()->withErrors(['error' => 'Vous n\\'êtes pas autorisé à voir les cours de cette classe.']);\n        }\n        $cours = Cours::where('classe_id', $id)->where('is_deleted', false)->get();\n        return view('Professeurs.Cours.listCours', compact('classe', 'cours'));\n    }\n    \n    \n    \n    public function detailCours($id)\n    {\n        $cours = Cours::findOrFail($id);\n        $classe= $cours->classe->id;\n    if (!$cours) {\n        return redirect()->route('cours.index')->with('error', 'Le cours demandé n\\'existe pas.');\n    }\n        return  view('Professeurs.Cours.coursDetail',compact('cours','classe'));\n    }\n    \n    public function editProfile()\n    {\n        $professeur = Auth::user()->professeur;\n        return view('Professeurs.profileEdit', compact('professeur'));\n    }\n\n    public function updateProfile(UpdateProfessorProfileRequest $request)\n    {\n        $user = Auth::user();\n        $professeur = $user->professeur;\n        $data = $request->validated();\n    //     $data = $request->validate([\n    //     'nom' => 'required|string|max:255',\n    //     'prenoms'  =>  'required|string|max:255',\n    //     'adresse'  =>  'required|string|max:255',\n    //     'spécialiter'  =>  'required|string|max:255',\n    //     'telephone'  =>  'required|string|max:255',\n      \n    // ]);\n\n    $professeur->update($data);\n    return redirect()->route('professeurs.profile.edit')->with('success', 'Profil mis à jour avec succès');\n    }\n}\n"
        }
    ]
}