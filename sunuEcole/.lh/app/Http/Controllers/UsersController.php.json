{
    "sourceFile": "app/Http/Controllers/UsersController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1727022833826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727023298706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n+                    \n                     if (!$professeur || !$professeur->is_completed) {\n                         return redirect()->route('professeurs.complete-profile');\n                     }\n                     return redirect()->route('professeurs.dashboard');\n"
                },
                {
                    "date": 1727023325283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,10 @@\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n-                    \n+                    Log::info(\"User authenticated: \" . $user->id);\n+\n                     if (!$professeur || !$professeur->is_completed) {\n                         return redirect()->route('professeurs.complete-profile');\n                     }\n                     return redirect()->route('professeurs.dashboard');\n"
                },
                {
                    "date": 1727023371674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,9 @@\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n-                    Log::info(\"User authenticated: \" . $user->id);\n-\n+                    <dd></dd>\n                     if (!$professeur || !$professeur->is_completed) {\n                         return redirect()->route('professeurs.complete-profile');\n                     }\n                     return redirect()->route('professeurs.dashboard');\n"
                },
                {
                    "date": 1727023378939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n-                    <dd></dd>\n+                    dd($)\n                     if (!$professeur || !$professeur->is_completed) {\n                         return redirect()->route('professeurs.complete-profile');\n                     }\n                     return redirect()->route('professeurs.dashboard');\n"
                },
                {
                    "date": 1727023711982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,16 +28,16 @@\n     $credentials = $request->only('email', 'password');\n \n     if (Auth::attempt($credentials)) {\n         $user = Auth::user();\n+        dd($professeur);\n         $role = DB::table('usersroles')\n             ->where('user_id', $user->id)\n             ->first();\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n-                    dd($)\n                     if (!$professeur || !$professeur->is_completed) {\n                         return redirect()->route('professeurs.complete-profile');\n                     }\n                     return redirect()->route('professeurs.dashboard');\n"
                },
                {
                    "date": 1727023720925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     $credentials = $request->only('email', 'password');\n \n     if (Auth::attempt($credentials)) {\n         $user = Auth::user();\n-        dd($professeur);\n+        dd($user);\n         $role = DB::table('usersroles')\n             ->where('user_id', $user->id)\n             ->first();\n         if ($role) {\n"
                },
                {
                    "date": 1727023784189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     $credentials = $request->only('email', 'password');\n \n     if (Auth::attempt($credentials)) {\n         $user = Auth::user();\n-        dd($user);\n+       \n         $role = DB::table('usersroles')\n             ->where('user_id', $user->id)\n             ->first();\n         if ($role) {\n"
                },
                {
                    "date": 1727023791226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n        \n         $role = DB::table('usersroles')\n             ->where('user_id', $user->id)\n             ->first();\n+            dd($user-);\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n"
                },
                {
                    "date": 1727024109382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n        \n         $role = DB::table('usersroles')\n             ->where('user_id', $user->id)\n             ->first();\n-            dd($user-);\n+            // dd($user->id);\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n"
                },
                {
                    "date": 1727024927394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \n                 case 2: // Élève\n                     $eleve = Eleves::where('user_id', $user->id)->first();\n                     if (!$eleve || !$eleve->is_completed) {\n-                        return redirect()->route('eleves.eleves.completeProfileForm');\n+                        return redirect()->route('eleves.completeProfileForm');\n                     }\n                     return redirect()->route('eleves.dashboard');\n \n                 case 3: // Parent\n"
                },
                {
                    "date": 1727024965318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n                 case 3: // Parent\n                     $parent = Parents::where('user_id', $user->id)->first();\n                     if (!$parent || !$parent->is_completed) {\n-                        return redirect()->route('parents.parent.completeProfileForm');\n+                        return redirect()->route('parents.completeProfileForm');\n                     }\n                     return redirect()->route('parents.dashboard');\n \n                 default:\n"
                },
                {
                    "date": 1727117110666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n        \n         $role = DB::table('usersroles')\n             ->where('user_id', $user->id)\n             ->first();\n-            // dd($user->id);\n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n"
                },
                {
                    "date": 1727117118639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n public function LoginForm(LoginRequest $request)\n {\n    \n     $credentials = $request->only('email', 'password');\n-\n     if (Auth::attempt($credentials)) {\n         $user = Auth::user();\n        \n         $role = DB::table('usersroles')\n"
                },
                {
                    "date": 1727117295923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n        \n         $role = DB::table('usersroles')\n             ->where('user_id', $user->id)\n             ->first();\n+            \n         if ($role) {\n             switch ($role->role_id) {\n                 case 1: // Professeur\n                     $professeur = Professeur::where('user_id', $user->id)->first();\n"
                },
                {
                    "date": 1731317575615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n             ]);\n         }\n     \n         // Redirection avec un message de succès\n-        return redirect()->route('users.login')->with('success', 'Utilisateur créé avec succès.');\n+        return redirect()->route('users.login')->with('success', 'co créé avec succès.');\n     }\n     \n     \n \n"
                },
                {
                    "date": 1731317628951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n     public function connection()\n {\n     return  view('LoginForm');\n }\n+\n+\n public function LoginForm(LoginRequest $request)\n {\n    \n     $credentials = $request->only('email', 'password');\n@@ -113,9 +115,9 @@\n             ]);\n         }\n     \n         // Redirection avec un message de succès\n-        return redirect()->route('users.login')->with('success', 'co créé avec succès.');\n+        return redirect()->route('users.login')->with('success', 'Utilisateur créé avec succès.');\n     }\n     \n     \n \n"
                },
                {
                    "date": 1731317663928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     {\n         Auth::logout();\n         $request->session()->invalidate();\n         $request->session()->regenerateToken();\n-        return redirect()->route('users.login')->with('success', 'Utilisateur créé avec succès.');\n+        return redirect()->route('users.login')->with('success', ' créé avec succès.');\n        \n         // return redirect('users.login');\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731317670602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     {\n         Auth::logout();\n         $request->session()->invalidate();\n         $request->session()->regenerateToken();\n-        return redirect()->route('users.login')->with('success', ' créé avec succès.');\n+        return redirect()->route('users.login')->with('success', 'Déconnection créé avec succès.');\n        \n         // return redirect('users.login');\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731317677044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     {\n         Auth::logout();\n         $request->session()->invalidate();\n         $request->session()->regenerateToken();\n-        return redirect()->route('users.login')->with('success', 'Déconnection créé avec succès.');\n+        return redirect()->route('users.login')->with('success', 'Déconnexion  créé avec succès.');\n        \n         // return redirect('users.login');\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731317683152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     {\n         Auth::logout();\n         $request->session()->invalidate();\n         $request->session()->regenerateToken();\n-        return redirect()->route('users.login')->with('success', 'Déconnexion  créé avec succès.');\n+        return redirect()->route('users.login')->with('success', 'Déconnexion  reuisi avec succès.');\n        \n         // return redirect('users.login');\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731317690997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     {\n         Auth::logout();\n         $request->session()->invalidate();\n         $request->session()->regenerateToken();\n-        return redirect()->route('users.login')->with('success', 'Déconnexion  reuisi avec succès.');\n+        return redirect()->route('users.login')->with('success','Déconnexion  reuisis  avec succès.');\n        \n         // return redirect('users.login');\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731317697231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     {\n         Auth::logout();\n         $request->session()->invalidate();\n         $request->session()->regenerateToken();\n-        return redirect()->route('users.login')->with('success','Déconnexion  reuisis  avec succès.');\n+        return redirect()->route('users.login')->with('success','Déconnexion reuisis avec succès.');\n        \n         // return redirect('users.login');\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731317760743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n             ]);\n         }\n     \n         // Redirection avec un message de succès\n-        return redirect()->route('users.login')->with('success', 'Utilisateur créé avec succès.');\n+        return redirect()->route('users.login')->with('success', 'C créé avec succès.');\n     }\n     \n     \n \n"
                },
                {
                    "date": 1731318300146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n <?php\n \n namespace App\\Http\\Controllers;\n-\n use App\\Http\\Requests\\LoginRequest;\n use App\\Http\\Requests\\RegisterRequest;\n use App\\Models\\User;\n use App\\Models\\Eleves;\n@@ -115,9 +114,9 @@\n             ]);\n         }\n     \n         // Redirection avec un message de succès\n-        return redirect()->route('users.login')->with('success', 'C créé avec succès.');\n+        return redirect()->route('users.login')->with('success', 'Compte  créé avec succès.');\n     }\n     \n     \n \n"
                },
                {
                    "date": 1731419775484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+use App\\Http\\Requests\\LoginRequest;\n+use App\\Http\\Requests\\RegisterRequest;\n+use App\\Models\\User;\n+use App\\Models\\Eleves;\n+use App\\Models\\Professeur;\n+use App\\Models\\Parents;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\Etablissement;\n+use Illuminate\\Support\\Facades\\DB;\n+use Illuminate\\Support\\Facades\\Auth;\n+use Illuminate\\Support\\Facades\\Hash;\n+\n+\n+class UsersController extends Controller\n+{\n+\n+    public function connection()\n+{\n+    return  view('LoginForm');\n+}\n+\n+\n+public function LoginForm(LoginRequest $request)\n+{\n+   \n+    $credentials = $request->only('email', 'password');\n+    if (Auth::attempt($credentials)) {\n+        $user = Auth::user();\n+       \n+        $role = DB::table('usersroles')\n+            ->where('user_id', $user->id)\n+            ->first();\n+            \n+        if ($role) {\n+            switch ($role->role_id) {\n+                case 1: // Professeur\n+                    $professeur = Professeur::where('user_id', $user->id)->first();\n+                    if (!$professeur || !$professeur->is_completed) {\n+                        return redirect()->route('professeurs.complete-profile');\n+                    }\n+                    return redirect()->route('professeurs.dashboard');\n+\n+                case 2: // Élève\n+                    $eleve = Eleves::where('user_id', $user->id)->first();\n+                    if (!$eleve || !$eleve->is_completed) {\n+                        return redirect()->route('eleves.completeProfileForm');\n+                    }\n+                    return redirect()->route('eleves.dashboard');\n+\n+                case 3: // Parent\n+                    $parent = Parents::where('user_id', $user->id)->first();\n+                    if (!$parent || !$parent->is_completed) {\n+                        return redirect()->route('parents.completeProfileForm');\n+                    }\n+                    return redirect()->route('parents.dashboard');\n+\n+                default:\n+                    return redirect()->route('home'); \n+            }\n+        } else {\n+            // Gérer le cas où aucun rôle spécifique n'est défini\n+            return redirect()->route('home'); \n+        }\n+    } else {\n+        // Authentification échouée\n+        return back()->withErrors([\n+            'credentials' => 'Les informations d\\'identification fournies sont incorrectes.',\n+        ])->onlyInput('email');\n+    }\n+}\n+\n+\n+\n+    \n+    public function create()\n+    {\n+        $etablissements = Etablissement::all(); \n+     \n+        return view('formulaireInscription', compact('etablissements'));\n+    }\n+\n+    public function store(RegisterRequest $request)\n+    {\n+        $validatedData = $request->validated();\n+        // Hachage du mot de passe\n+        $validatedData['password'] = Hash::make($validatedData['password']);\n+    \n+        // Création d'un nouvel utilisateur avec les données validées\n+        $user = User::create($validatedData);\n+    \n+        // Déterminer l'ID du rôle basé sur le type de compte\n+        $roleId = null;\n+        switch ($request->typecompte) {\n+            case 'professeurs':\n+                $roleId = 1;\n+                break;\n+            case 'eleves':\n+                $roleId = 2;\n+                break;\n+            case 'parents':\n+                $roleId = 3;\n+                break;\n+        }\n+    \n+        // Vérifier que l'ID du rôle est défini\n+        if ($roleId) {\n+            // Insérer les informations dans la table pivot usersrole\n+            DB::table('usersroles')->insert([\n+                'user_id' => $user->id,\n+                'role_id' => $roleId,\n+            ]);\n+        }\n+    \n+        // Redirection avec un message de succès\n+        return redirect()->route('users.login')->with('success', 'Compte  créé avec succès.');\n+    }\n+    \n+    \n+\n+    public function logout(Request $request)\n+    {\n+        Auth::logout();\n+        $request->session()->invalidate();\n+        $request->session()->regenerateToken();\n+        return redirect()->route('users.login')->with('success','Déconnexion reuisis avec succès.');\n+       \n+        // return redirect('users.login');\n+    }\n+\n+\n+\n+\n+\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731419781531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,145 +126,12 @@\n         $request->session()->invalidate();\n         $request->session()->regenerateToken();\n         return redirect()->route('users.login')->with('success','Déconnexion reuisis avec succès.');\n        \n-        // return redirect('users.login');\n     }\n \n \n+                    \n \n \n \n-    \n-}\n-<?php\n-\n-namespace App\\Http\\Controllers;\n-use App\\Http\\Requests\\LoginRequest;\n-use App\\Http\\Requests\\RegisterRequest;\n-use App\\Models\\User;\n-use App\\Models\\Eleves;\n-use App\\Models\\Professeur;\n-use App\\Models\\Parents;\n-use Illuminate\\Http\\Request;\n-use App\\Models\\Etablissement;\n-use Illuminate\\Support\\Facades\\DB;\n-use Illuminate\\Support\\Facades\\Auth;\n-use Illuminate\\Support\\Facades\\Hash;\n-\n-\n-class UsersController extends Controller\n-{\n-\n-    public function connection()\n-{\n-    return  view('LoginForm');\n-}\n-\n-\n-public function LoginForm(LoginRequest $request)\n-{\n-   \n-    $credentials = $request->only('email', 'password');\n-    if (Auth::attempt($credentials)) {\n-        $user = Auth::user();\n-       \n-        $role = DB::table('usersroles')\n-            ->where('user_id', $user->id)\n-            ->first();\n-            \n-        if ($role) {\n-            switch ($role->role_id) {\n-                case 1: // Professeur\n-                    $professeur = Professeur::where('user_id', $user->id)->first();\n-                    if (!$professeur || !$professeur->is_completed) {\n-                        return redirect()->route('professeurs.complete-profile');\n-                    }\n-                    return redirect()->route('professeurs.dashboard');\n-\n-                case 2: // Élève\n-                    $eleve = Eleves::where('user_id', $user->id)->first();\n-                    if (!$eleve || !$eleve->is_completed) {\n-                        return redirect()->route('eleves.completeProfileForm');\n-                    }\n-                    return redirect()->route('eleves.dashboard');\n-\n-                case 3: // Parent\n-                    $parent = Parents::where('user_id', $user->id)->first();\n-                    if (!$parent || !$parent->is_completed) {\n-                        return redirect()->route('parents.completeProfileForm');\n-                    }\n-                    return redirect()->route('parents.dashboard');\n-\n-                default:\n-                    return redirect()->route('home'); \n-            }\n-        } else {\n-            // Gérer le cas où aucun rôle spécifique n'est défini\n-            return redirect()->route('home'); \n-        }\n-    } else {\n-        // Authentification échouée\n-        return back()->withErrors([\n-            'credentials' => 'Les informations d\\'identification fournies sont incorrectes.',\n-        ])->onlyInput('email');\n-    }\n-}\n-\n-\n-\n-    \n-    public function create()\n-    {\n-        $etablissements = Etablissement::all(); \n-     \n-        return view('formulaireInscription', compact('etablissements'));\n-    }\n-\n-    public function store(RegisterRequest $request)\n-    {\n-        $validatedData = $request->validated();\n-        // Hachage du mot de passe\n-        $validatedData['password'] = Hash::make($validatedData['password']);\n-    \n-        // Création d'un nouvel utilisateur avec les données validées\n-        $user = User::create($validatedData);\n-    \n-        // Déterminer l'ID du rôle basé sur le type de compte\n-        $roleId = null;\n-        switch ($request->typecompte) {\n-            case 'professeurs':\n-                $roleId = 1;\n-                break;\n-            case 'eleves':\n-                $roleId = 2;\n-                break;\n-            case 'parents':\n-                $roleId = 3;\n-                break;\n-        }\n-    \n-        // Vérifier que l'ID du rôle est défini\n-        if ($roleId) {\n-            // Insérer les informations dans la table pivot usersrole\n-            DB::table('usersroles')->insert([\n-                'user_id' => $user->id,\n-                'role_id' => $roleId,\n-            ]);\n-        }\n-    \n-        // Redirection avec un message de succès\n-        return redirect()->route('users.login')->with('success', 'Compte  créé avec succès.');\n-    }\n-    \n-    \n-\n-    public function logout(Request $request)\n-    {\n-        Auth::logout();\n-        $request->session()->invalidate();\n-        $request->session()->regenerateToken();\n-        return redirect()->route('users.login')->with('success','Déconnexion reuisis avec succès.');\n-       \n-        // return redirect('users.login');\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731419786747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n        \n     }\n \n \n-                    \n+                    public \n \n \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731419795663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n        \n     }\n \n \n-                    public \n+                    public function \n \n \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731419804508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n        \n     }\n \n \n-                    public function \n+                    public function updatePassword\n \n \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731419809724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n        \n     }\n \n \n-                    public function updatePassword\n+                    public function updatePassword(){*}\n \n \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731489856683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,13 @@\n        \n     }\n \n \n-                    public function updatePassword(){*}\n+                       public function \n \n+                    public function updatePassword(){\n \n+                    }\n \n+\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731489864643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n        \n     }\n \n \n-                       public function \n+                       public function editpassword\n \n                     public function updatePassword(){\n \n                     }\n"
                },
                {
                    "date": 1731489871137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,12 @@\n        \n     }\n \n \n-                       public function editpassword\n+                       public function editpassword()\n+                       {\n+                               \n+                       }\n \n                     public function updatePassword(){\n \n                     }\n"
                },
                {
                    "date": 1731489877053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,10 @@\n                        {\n                                \n                        }\n \n-                    public function updatePassword(){\n+                    public function updatePassword()\n+                    {\n \n                     }\n \n \n"
                },
                {
                    "date": 1731489935510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,9 @@\n                        }\n \n                     public function updatePassword()\n                     {\n+                        \n \n                     }\n \n \n"
                },
                {
                    "date": 1731489955634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,10 +136,30 @@\n                        }\n \n                     public function updatePassword()\n                     {\n-                        \n+                        public function updatePassword(Request $request)\n+{\n+    // Valider les données du formulaire\n+    $validated = $request->validate([\n+        'current_password' => 'required|string',\n+        'new_password' => 'required|string|min:8|confirmed', // Minimum 8 caractères et confirmation\n+    ]);\n \n+    // Vérifier si le mot de passe actuel correspond à celui de l'utilisateur\n+    if (!Hash::check($validated['current_password'], Auth::user()->password)) {\n+        return back()->withErrors(['current_password' => 'Le mot de passe actuel est incorrect.']);\n+    }\n+\n+    // Mettre à jour le mot de passe\n+    $user = Auth::user();\n+    $user->password = Hash::make($validated['new_password']);\n+    $user->save();\n+\n+    // Rediriger avec un message de succès\n+    return redirect()->route('professeurs.dashboard')->with('success', 'Votre mot de passe a été modifié avec succès.');\n+}\n+\n                     }\n \n \n \n"
                },
                {
                    "date": 1731489965391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n                        }\n \n                     public function updatePassword()\n                     {\n-                        public function updatePassword(Request $request)\n+                        public function updatePassword()\n {\n     // Valider les données du formulaire\n     $validated = $request->validate([\n         'current_password' => 'required|string',\n"
                },
                {
                    "date": 1731489972032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,12 +134,11 @@\n                        {\n                                \n                        }\n \n-                    public function updatePassword()\n+                    public function updatePassword(Request $request)\n                     {\n-                        public function updatePassword()\n-{\n+ \n     // Valider les données du formulaire\n     $validated = $request->validate([\n         'current_password' => 'required|string',\n         'new_password' => 'required|string|min:8|confirmed', // Minimum 8 caractères et confirmation\n"
                },
                {
                    "date": 1731489983262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,27 +137,26 @@\n \n                     public function updatePassword(Request $request)\n                     {\n  \n-    // Valider les données du formulaire\n-    $validated = $request->validate([\n-        'current_password' => 'required|string',\n-        'new_password' => 'required|string|min:8|confirmed', // Minimum 8 caractères et confirmation\n-    ]);\n+                    // Valider les données du formulaire\n+                    $validated = $request->validate([\n+                        'current_password' => 'required|string',\n+                        'new_password' => 'required|string|min:8|confirmed', // Minimum 8 caractères et confirmation\n+                    ]);\n \n-    // Vérifier si le mot de passe actuel correspond à celui de l'utilisateur\n-    if (!Hash::check($validated['current_password'], Auth::user()->password)) {\n-        return back()->withErrors(['current_password' => 'Le mot de passe actuel est incorrect.']);\n-    }\n+                    // Vérifier si le mot de passe actuel correspond à celui de l'utilisateur\n+                    if (!Hash::check($validated['current_password'], Auth::user()->password)) {\n+                        return back()->withErrors(['current_password' => 'Le mot de passe actuel est incorrect.']);\n+                    }\n \n-    // Mettre à jour le mot de passe\n-    $user = Auth::user();\n-    $user->password = Hash::make($validated['new_password']);\n-    $user->save();\n+                    // Mettre à jour le mot de passe\n+                    $user = Auth::user();\n+                    $user->password = Hash::make($validated['new_password']);\n+                    $user->save();\n \n-    // Rediriger avec un message de succès\n-    return redirect()->route('professeurs.dashboard')->with('success', 'Votre mot de passe a été modifié avec succès.');\n-}\n+                    // Rediriger avec un message de succès\n+                    return redirect()->route('professeurs.dashboard')->with('success', 'Votre mot de passe a été modifié avec succès.');\n \n                     }\n \n \n"
                },
                {
                    "date": 1731490024095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \n \n                        public function editpassword()\n                        {\n-                               \n+                               return view\n                        }\n \n                     public function updatePassword(Request $request)\n                     {\n"
                },
                {
                    "date": 1731490033302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \n \n                        public function editpassword()\n                        {\n-                               return view\n+                               return view('');\n                        }\n \n                     public function updatePassword(Request $request)\n                     {\n"
                },
                {
                    "date": 1731490038753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \n \n                        public function editpassword()\n                        {\n-                               return view('');\n+                               return view('professeur');\n                        }\n \n                     public function updatePassword(Request $request)\n                     {\n"
                },
                {
                    "date": 1731490058381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \n \n                        public function editpassword()\n                        {\n-                               return view('professeur');\n+                               return view('Professeur.');\n                        }\n \n                     public function updatePassword(Request $request)\n                     {\n"
                },
                {
                    "date": 1731490074901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \n \n                        public function editpassword()\n                        {\n-                               return view('Professeur.');\n+                               return view('Professeur.updat');\n                        }\n \n                     public function updatePassword(Request $request)\n                     {\n"
                },
                {
                    "date": 1731490081060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \n \n                        public function editpassword()\n                        {\n-                               return view('Professeur.updat');\n+                               return view('Professeur.updatePassword');\n                        }\n \n                     public function updatePassword(Request $request)\n                     {\n"
                },
                {
                    "date": 1731490409978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \n \n                        public function editpassword()\n                        {\n-                               return view('Professeur.updatePassword');\n+                               return view('Professeurs.updatePassword');\n                        }\n \n                     public function updatePassword(Request $request)\n                     {\n"
                },
                {
                    "date": 1731493039724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n  \n                     // Valider les données du formulaire\n                     $validated = $request->validate([\n                         'current_password' => 'required|string',\n-                        'new_password' => 'required|string|min:8|confirmed', // Minimum 8 caractères et confirmation\n+                        'new_password' => 'required|string|min:8|confirmed', \n                     ]);\n \n                     // Vérifier si le mot de passe actuel correspond à celui de l'utilisateur\n                     if (!Hash::check($validated['current_password'], Auth::user()->password)) {\n"
                }
            ],
            "date": 1727022833826,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\LoginRequest;\nuse App\\Http\\Requests\\RegisterRequest;\nuse App\\Models\\User;\nuse App\\Models\\Eleves;\nuse App\\Models\\Professeur;\nuse App\\Models\\Parents;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Etablissement;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Hash;\n\n\nclass UsersController extends Controller\n{\n\n    public function connection()\n{\n    return  view('LoginForm');\n}\npublic function LoginForm(LoginRequest $request)\n{\n   \n    $credentials = $request->only('email', 'password');\n\n    if (Auth::attempt($credentials)) {\n        $user = Auth::user();\n        $role = DB::table('usersroles')\n            ->where('user_id', $user->id)\n            ->first();\n        if ($role) {\n            switch ($role->role_id) {\n                case 1: // Professeur\n                    $professeur = Professeur::where('user_id', $user->id)->first();\n                    if (!$professeur || !$professeur->is_completed) {\n                        return redirect()->route('professeurs.complete-profile');\n                    }\n                    return redirect()->route('professeurs.dashboard');\n\n                case 2: // Élève\n                    $eleve = Eleves::where('user_id', $user->id)->first();\n                    if (!$eleve || !$eleve->is_completed) {\n                        return redirect()->route('eleves.eleves.completeProfileForm');\n                    }\n                    return redirect()->route('eleves.dashboard');\n\n                case 3: // Parent\n                    $parent = Parents::where('user_id', $user->id)->first();\n                    if (!$parent || !$parent->is_completed) {\n                        return redirect()->route('parents.parent.completeProfileForm');\n                    }\n                    return redirect()->route('parents.dashboard');\n\n                default:\n                    return redirect()->route('home'); \n            }\n        } else {\n            // Gérer le cas où aucun rôle spécifique n'est défini\n            return redirect()->route('home'); \n        }\n    } else {\n        // Authentification échouée\n        return back()->withErrors([\n            'credentials' => 'Les informations d\\'identification fournies sont incorrectes.',\n        ])->onlyInput('email');\n    }\n}\n\n\n\n    \n    public function create()\n    {\n        $etablissements = Etablissement::all(); \n     \n        return view('formulaireInscription', compact('etablissements'));\n    }\n\n    public function store(RegisterRequest $request)\n    {\n        $validatedData = $request->validated();\n        // Hachage du mot de passe\n        $validatedData['password'] = Hash::make($validatedData['password']);\n    \n        // Création d'un nouvel utilisateur avec les données validées\n        $user = User::create($validatedData);\n    \n        // Déterminer l'ID du rôle basé sur le type de compte\n        $roleId = null;\n        switch ($request->typecompte) {\n            case 'professeurs':\n                $roleId = 1;\n                break;\n            case 'eleves':\n                $roleId = 2;\n                break;\n            case 'parents':\n                $roleId = 3;\n                break;\n        }\n    \n        // Vérifier que l'ID du rôle est défini\n        if ($roleId) {\n            // Insérer les informations dans la table pivot usersrole\n            DB::table('usersroles')->insert([\n                'user_id' => $user->id,\n                'role_id' => $roleId,\n            ]);\n        }\n    \n        // Redirection avec un message de succès\n        return redirect()->route('users.login')->with('success', 'Utilisateur créé avec succès.');\n    }\n    \n    \n\n    public function logout(Request $request)\n    {\n        Auth::logout();\n        $request->session()->invalidate();\n        $request->session()->regenerateToken();\n        return redirect()->route('users.login')->with('success', 'Utilisateur créé avec succès.');\n       \n        // return redirect('users.login');\n    }\n}"
        }
    ]
}